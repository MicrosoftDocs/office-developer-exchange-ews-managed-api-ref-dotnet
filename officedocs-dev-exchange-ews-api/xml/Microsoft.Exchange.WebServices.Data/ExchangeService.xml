<Type Name="ExchangeService" FullName="Microsoft.Exchange.WebServices.Data.ExchangeService">
  <TypeSignature Language="C#" Value="public sealed class ExchangeService : Microsoft.Exchange.WebServices.Data.ExchangeServiceBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExchangeService extends Microsoft.Exchange.WebServices.Data.ExchangeServiceBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Exchange.WebServices.Data.ExchangeService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExchangeService&#xA;Inherits ExchangeServiceBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExchangeService sealed : Microsoft::Exchange::WebServices::Data::ExchangeServiceBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Exchange.WebServices.Data.ExchangeServiceBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a binding to Exchange Web Services (EWS).</summary>
    <remarks>
      <para>Before you can use the EWS Managed API to perform any task, you must create an instance of the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class. But the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class goes beyond just serving as a starting point for EWS Managed API client development. It has quite a bit of functionality built in. </para>
      <para>Table 1:  Ways that you can use the ExchangeService class</para>
      <list type="table">
        <item>
          <term>Control authentication</term>
          <description>If your users log on to Windows with the same credentials they use to access their Exchange server, set the <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeServiceBase.UseDefaultCredentials" /> property to <b>true</b> to enable your application to connect to the Exchange server without asking the user for a user name and password.If you need to specify the user name and password, set the <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeServiceBase.Credentials" /> property. The <b>Credentials</b> property uses a <see cref="T:Microsoft.Exchange.WebServices.Data.WebCredentials" /> object to keep users’ authentication information safe.Use the <b>Credentials</b> property along with the <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeService.ImpersonatedUserId" /> property to authenticate as a service account and <a href="bbaed350-edcc-4413-bf2c-9ffcf24c8a23.htm">impersonate a different user</a></description>
        </item>
        <item>
          <term>Manage endpoints</term>
          <description>Use the <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AutodiscoverUrl(System.String)" /> method to automatically find the correct EWS endpoint for your user. Alternatively, if you have the endpoint for your user cached, you can use the <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeService.Url" /> property to use that endpoint.</description>
        </item>
        <item>
          <term>Work with groups of items</term>
          <description>Use the <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CopyItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId)" />, <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CreateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsMode})" />, <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DeleteItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.DeleteMode,System.Nullable{Microsoft.Exchange.WebServices.Data.SendCancellationsMode},System.Nullable{Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence})" />, <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.MoveItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId)" />, and <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ConflictResolutionMode,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode})" /> methods to perform bulk operations on multiple items. You can use these methods to handle scenarios such as creating multiple <see cref="T:Microsoft.Exchange.WebServices.Data.Contact" /> objects to support the bulk import of contacts or marking multiple <see cref="T:Microsoft.Exchange.WebServices.Data.Task" /> objects complete, all in a single EWS request.</description>
        </item>
        <item>
          <term>Work with delegates</term>
          <description>Use the <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AddDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Nullable{Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope},Microsoft.Exchange.WebServices.Data.DelegateUser[])" />, <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Boolean,Microsoft.Exchange.WebServices.Data.UserId[])" />, <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.RemoveDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,Microsoft.Exchange.WebServices.Data.UserId[])" />, and <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Nullable{Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope},Microsoft.Exchange.WebServices.Data.DelegateUser[])" /> methods to work with delegates.</description>
        </item>
      </list>
      <para>While we can’t cover everything that you can do with the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class here, you can find out more by exploring the methods and properties. Other features of this class that you might be interested in include:</para>
      <list type="bullet">
        <item>
          <description>Automatic cookie management</description>
        </item>
        <item>
          <description>Client logging for troubleshooting</description>
        </item>
        <item>
          <description>Rules and Automatic Replies (Out of Office) settings management</description>
        </item>
        <item>
          <description>Name resolution against the address book</description>
        </item>
        <item>
          <description>Mailbox search</description>
        </item>
      </list>
      <para />
    </remarks>
    <example>
      <para>Now let's see it all in action. The following code example shows you how to set a specific user name and password, discover the EWS endpoint by using Autodiscover, create two new contacts in the user's default Contacts folder, and grant a second user delegate access to the user's Calendar folder.</para>
      <code>using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Net;
using System.Security;
using Microsoft.Exchange.WebServices.Data;

static bool RedirectionCallback(string url)
{
    return url.ToLower().StartsWith("https://");
}

static void UseExchangeService(string userEmailAddress, SecureString userPassword)
{
    ExchangeService service = new ExchangeService();

    #region Authentication

    // Set specific credentials.
    service.Credentials = new NetworkCredential(userEmailAddress, userPassword);
    #endregion

    #region Endpoint management

    // Look up the user's EWS endpoint by using Autodiscover.
    service.AutodiscoverUrl(userEmailAddress, RedirectionCallback);

    Console.WriteLine("EWS Endpoint: {0}", service.Url);
    #endregion

    #region Working with groups of items

    // Create two new contacts in the user's default
    // Contacts folder.
    List<Contact> contactsToAdd = new List<Contact>();

    Contact newContact1 = new Contact(service);
    newContact1.GivenName = "Rosetta";
    newContact1.Surname = "Simpson";
    newContact1.PhoneNumbers[PhoneNumberKey.MobilePhone] = "425-555-1234";
    newContact1.EmailAddresses[EmailAddressKey.EmailAddress1] = "rosetta@alpineskihouse.com";

    contactsToAdd.Add(newContact1);

    Contact newContact2 = new Contact(service);
    newContact2.GivenName = "Barney";
    newContact2.Surname = "Carmack";
    newContact2.PhoneNumbers[PhoneNumberKey.MobilePhone] = "425-555-5678";
    newContact2.EmailAddresses[EmailAddressKey.EmailAddress1] = "barney@contoso.com";

    contactsToAdd.Add(newContact2);

    ServiceResponseCollection<ServiceResponse> createItemsResponse =
        service.CreateItems(contactsToAdd, WellKnownFolderName.Contacts, null, null);

    if (createItemsResponse.OverallResult != ServiceResult.Success)
    {
        Console.WriteLine("CreateItems returned a non-success response!");
        for (int i = 0; i < createItemsResponse.Count; i++)
        {
            Console.WriteLine("{0}: {1} - {2}", i + 1,
                createItemsResponse[i].ErrorCode, createItemsResponse[i].ErrorMessage);
        }
    }
    else
    {
        Console.WriteLine("CreateItems successfully created 2 contacts in default Contacts folder.");
    }
    #endregion

    #region Working with delegates

    // Add a user as a delegate with Reviewer rights
    // to the user's Calendar folder.
    Mailbox mailbox = new Mailbox(userEmailAddress);

    DelegateUser newDelegate = new DelegateUser("ian@fourthcoffee.com");
    newDelegate.Permissions.CalendarFolderPermissionLevel = DelegateFolderPermissionLevel.Reviewer;

    List<DelegateUser> delegatesToAdd = new List<DelegateUser>();
    delegatesToAdd.Add(newDelegate);

    Collection<DelegateUserResponse> addDelegateResponse = service.AddDelegates(mailbox, null, delegatesToAdd);

    for (int i = 0; i < addDelegateResponse.Count; i++)
    {
        if (addDelegateResponse[i].Result != ServiceResult.Success)
        {
            Console.WriteLine("Unable to add {0} as a delegate.", 
                addDelegateResponse[i].DelegateUser.UserId.PrimarySmtpAddress);
            Console.WriteLine("    {0}: {1}", addDelegateResponse[i].ErrorCode, 
                addDelegateResponse[i].ErrorMessage);
        }
        else
        {
            Console.WriteLine("Added {0} as a delegate.", 
                addDelegateResponse[i].DelegateUser.UserId.PrimarySmtpAddress);
        }    
    }
    
    #endregion
}</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExchangeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExchangeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class, targeting the latest supported version of Exchange Web Services (EWS) and scoped to the system's current time zone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExchangeService (Microsoft.Exchange.WebServices.Data.ExchangeVersion requestedServerVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Exchange.WebServices.Data.ExchangeVersion requestedServerVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.#ctor(Microsoft.Exchange.WebServices.Data.ExchangeVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (requestedServerVersion As ExchangeVersion)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExchangeService(Microsoft::Exchange::WebServices::Data::ExchangeVersion requestedServerVersion);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="requestedServerVersion" Type="Microsoft.Exchange.WebServices.Data.ExchangeVersion" />
      </Parameters>
      <Docs>
        <param name="requestedServerVersion">The version of EWS that the service targets.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class, targeting the specified version of Exchange Web Services (EWS) and scoped to the system's current time zone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExchangeService (TimeZoneInfo timeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.TimeZoneInfo timeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.#ctor(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (timeZone As TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExchangeService(TimeZoneInfo ^ timeZone);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="timeZone">The time zone to which the service is scoped.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class, targeting the latest supported version of Exchange Web Services (EWS) and scoped to the specified time zone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExchangeService (Microsoft.Exchange.WebServices.Data.ExchangeVersion requestedServerVersion, TimeZoneInfo timeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Exchange.WebServices.Data.ExchangeVersion requestedServerVersion, class System.TimeZoneInfo timeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.#ctor(Microsoft.Exchange.WebServices.Data.ExchangeVersion,System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (requestedServerVersion As ExchangeVersion, timeZone As TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExchangeService(Microsoft::Exchange::WebServices::Data::ExchangeVersion requestedServerVersion, TimeZoneInfo ^ timeZone);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="requestedServerVersion" Type="Microsoft.Exchange.WebServices.Data.ExchangeVersion" />
        <Parameter Name="timeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="requestedServerVersion">The version of EWS that the service targets.</param>
        <param name="timeZone">The time zone to which the service is scoped.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> class, targeting the specified version of Exchange Web Services (EWS) and scoped to the specified time zone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDelegates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; AddDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, params Microsoft.Exchange.WebServices.Data.DelegateUser[] delegateUsers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; AddDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, class Microsoft.Exchange.WebServices.Data.DelegateUser[] delegateUsers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AddDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Nullable{Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope},Microsoft.Exchange.WebServices.Data.DelegateUser[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::DelegateUserResponse ^&gt; ^ AddDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, Nullable&lt;Microsoft::Exchange::WebServices::Data::MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::DelegateUser ^&gt; ^ delegateUsers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="meetingRequestsDeliveryScope" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt;" />
        <Parameter Name="delegateUsers" Type="Microsoft.Exchange.WebServices.Data.DelegateUser[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox to which delegates are to be added.</param>
        <param name="meetingRequestsDeliveryScope">One of the enumeration values that specifies how meeting requests should be sent to delegates.</param>
        <param name="delegateUsers">The delegates to be added to the specified mailbox.</param>
        <summary>Adds delegates to a specific mailbox.</summary>
        <returns>A collection of objects that provides the results of the operation.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDelegates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; AddDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.DelegateUser&gt; delegateUsers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; AddDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUser&gt; delegateUsers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AddDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Nullable{Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope},System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.DelegateUser})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::DelegateUserResponse ^&gt; ^ AddDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, Nullable&lt;Microsoft::Exchange::WebServices::Data::MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::DelegateUser ^&gt; ^ delegateUsers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="meetingRequestsDeliveryScope" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt;" />
        <Parameter Name="delegateUsers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.DelegateUser&gt;" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox that delegates are to be added to.</param>
        <param name="meetingRequestsDeliveryScope">One of the enumeration values that specifies how meeting requests should be sent to delegates.</param>
        <param name="delegateUsers">The delegates to be added to the specified mailbox.</param>
        <summary>Adds delegates to a specified mailbox. </summary>
        <returns>A collection of objects that provides the results of the operation.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArchiveItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ArchiveItemResponse&gt; ArchiveItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.FolderId sourceFolderId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ArchiveItemResponse&gt; ArchiveItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, class Microsoft.Exchange.WebServices.Data.FolderId sourceFolderId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ArchiveItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId)" />
      <MemberSignature Language="VB.NET" Value="Public Function ArchiveItems (itemIds As IEnumerable(Of ItemId), sourceFolderId As FolderId) As ServiceResponseCollection(Of ArchiveItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ArchiveItemResponse ^&gt; ^ ArchiveItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::FolderId ^ sourceFolderId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ArchiveItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="sourceFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to move.</param>
        <param name="sourceFolderId">The ID of the primary folder from which items will be archived.</param>
        <summary>             Archives multiple items in a target folder.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ArchiveItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of <see cref="T:Microsoft.Exchange.WebServices.Data.ArchiveItemResponse" /> objects.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutodiscoverUrl">
      <MemberSignature Language="C#" Value="public void AutodiscoverUrl (string emailAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutodiscoverUrl(string emailAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AutodiscoverUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutodiscoverUrl (emailAddress As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutodiscoverUrl(System::String ^ emailAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailAddress">The email address to be used.</param>
        <summary>Initializes the <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeService.Url" /> property to the Exchange Web Services (EWS) endpoint for a specified email address by calling the Autodiscover service.</summary>
        <remarks>
          <para>If an Autodiscover server returns a redirect HTTP status code, this method will generate an <see cref="T:Microsoft.Exchange.WebServices.Data.AutodiscoverLocalException" /> with the <b>Message</b> property set to a string such as "Autodiscover blocked a potentially insecure redirection to https://autodiscover.contoso.com/autodiscover/autodiscover.xml. To allow Autodiscover to follow the redirection, use the AutodiscoverUrl(string, AutodiscoverRedirectionUrlValidationCallback) overload." This exception is generated for all redirect responses, regardless of the validity of the URL returned in the redirect response.</para>
          <para>To enable redirection, use the <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AutodiscoverUrl(System.String,Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback)" /> overload instead.</para>
          <para />
        </remarks>
        <example>
          <para>The following example shows how to get the user's EWS URL by using the <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AutodiscoverUrl(System.String)" /> method.</para>
          <code>using System.Net;
using System.Security;
using Microsoft.Exchange.WebServices.Data;

static void GetUsersEwsUrl(string userEmailAddress, SecureString userPassword)
{
    ExchangeService service = new ExchangeService();

    // Set specific credentials.
    service.Credentials = new NetworkCredential(userEmailAddress, userPassword);

    // Look up the user's EWS endpoint by using Autodiscover.
    service.AutodiscoverUrl(userEmailAddress);

    Console.WriteLine("EWS Endpoint: {0}", service.Url);
}</code>
        </example>
        <exception cref="T:Microsoft.Exchange.WebServices.Data.AutodiscoverLocalException">A local failure, such as a blocked redirection or a number of redirections greater than the maximum, caused Autodiscover to stop.</exception>
        <exception cref="T:Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRemoteException">The Autodiscover server returned an error.</exception>
        <exception cref="T:Microsoft.Exchange.WebServices.Data.ServiceValidationException">An empty value was passed in the <paramref name="emailAddress" /> parameter.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutodiscoverUrl">
      <MemberSignature Language="C#" Value="public void AutodiscoverUrl (string emailAddress, Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback validateRedirectionUrlCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutodiscoverUrl(string emailAddress, class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback validateRedirectionUrlCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AutodiscoverUrl(System.String,Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutodiscoverUrl (emailAddress As String, validateRedirectionUrlCallback As AutodiscoverRedirectionUrlValidationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutodiscoverUrl(System::String ^ emailAddress, Microsoft::Exchange::WebServices::Autodiscover::AutodiscoverRedirectionUrlValidationCallback ^ validateRedirectionUrlCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailAddress" Type="System.String" />
        <Parameter Name="validateRedirectionUrlCallback" Type="Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback" />
      </Parameters>
      <Docs>
        <param name="emailAddress">The email address to be used.</param>
        <param name="validateRedirectionUrlCallback">The callback that is used to validate the redirection URL.</param>
        <summary>Initializes the <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeService.Url" /> property to the Exchange Web Services (EWS) endpoint for a specified email address by calling the Autodiscover service.</summary>
        <remarks>
          <para>This method allows Autodiscover to follow redirects when an Autodiscover server responds with a 302 Redirect status.</para>
          <para />
        </remarks>
        <example>
          <para>The following example shows how to get the user's EWS URL by using the <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.AutodiscoverUrl(System.String,Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback)" /> method.</para>
          <code>using System.Net;
using System.Security;
using Microsoft.Exchange.WebServices.Data;

static bool RedirectionCallback(string url)
{
    // Return true if the URL is an HTTPS URL.
    return url.ToLower().StartsWith("https://");
}

static void GetUsersEwsUrl(string userEmailAddress, SecureString userPassword)
{
    ExchangeService service = new ExchangeService();

    // Set specific credentials.
    service.Credentials = new NetworkCredential(userEmailAddress, userPassword);

    // Look up the user's EWS endpoint by using Autodiscover.
    service.AutodiscoverUrl(userEmailAddress, RedirectionCallback);

    Console.WriteLine("EWS Endpoint: {0}", service.Url);
}</code>
        </example>
        <exception cref="T:Microsoft.Exchange.WebServices.Data.AutodiscoverLocalException">A local failure, such as a blocked redirection or a number of redirections greater than the maximum, caused Autodiscover to stop.</exception>
        <exception cref="T:Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRemoteException">The Autodiscover server returned an error.</exception>
        <exception cref="T:Microsoft.Exchange.WebServices.Data.ServiceValidationException">An empty value was passed in the <paramref name="emailAddress" /> parameter.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetNonIndexableItemDetails">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetNonIndexableItemDetails (AsyncCallback callback, object state, Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetNonIndexableItemDetails(class System.AsyncCallback callback, object state, class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginGetNonIndexableItemDetails(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetNonIndexableItemDetails (callback As AsyncCallback, state As Object, parameters As GetNonIndexableItemDetailsParameters) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetNonIndexableItemDetails(AsyncCallback ^ callback, System::Object ^ state, Microsoft::Exchange::WebServices::Data::GetNonIndexableItemDetailsParameters ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="parameters" Type="Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters" />
      </Parameters>
      <Docs>
        <param name="callback">callback</param>
        <param name="state">state</param>
        <param name="parameters">Get non indexable item details parameters</param>
        <summary>
            Asynchronous call to get non indexable item details
            </summary>
        <returns>Async result</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetNonIndexableItemStatistics">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetNonIndexableItemStatistics (AsyncCallback callback, object state, Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetNonIndexableItemStatistics(class System.AsyncCallback callback, object state, class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginGetNonIndexableItemStatistics(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetNonIndexableItemStatistics (callback As AsyncCallback, state As Object, parameters As GetNonIndexableItemStatisticsParameters) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetNonIndexableItemStatistics(AsyncCallback ^ callback, System::Object ^ state, Microsoft::Exchange::WebServices::Data::GetNonIndexableItemStatisticsParameters ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="parameters" Type="Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters" />
      </Parameters>
      <Docs>
        <param name="callback">callback</param>
        <param name="state">state</param>
        <param name="parameters">Get non indexable item statistics parameters</param>
        <summary>
            Asynchronous call to get non indexable item statistics
            </summary>
        <returns>Async result</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSearchMailboxes">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSearchMailboxes (AsyncCallback callback, object state, Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters searchParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSearchMailboxes(class System.AsyncCallback callback, object state, class Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters searchParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSearchMailboxes(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSearchMailboxes (callback As AsyncCallback, state As Object, searchParameters As SearchMailboxesParameters) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSearchMailboxes(AsyncCallback ^ callback, System::Object ^ state, Microsoft::Exchange::WebServices::Data::SearchMailboxesParameters ^ searchParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="searchParameters" Type="Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters" />
      </Parameters>
      <Docs>
        <param name="callback">A reference to the method to call when the corresponding asynchronous operation completes.</param>
        <param name="state">An object that contains state information for this request.</param>
        <param name="searchParameters">A <see cref="T:Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters" /> object.</param>
        <summary>             Initiates an asynchronous request to search mailboxes for items that match a query string by using the associated <see cref="T:Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters" /> object to specify details of the search request.              The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSearchMailboxes(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>An object that references the asynchronous request.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToPullNotifications">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToPullNotifications (AsyncCallback callback, object state, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, int timeout, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToPullNotifications(class System.AsyncCallback callback, object state, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, int32 timeout, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPullNotifications(System.AsyncCallback,System.Object,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToPullNotifications (callback As AsyncCallback, state As Object, folderIds As IEnumerable(Of FolderId), timeout As Integer, watermark As String, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToPullNotifications(AsyncCallback ^ callback, System::Object ^ state, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, int timeout, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="folderIds">The folder identifiers of the folders to be subscribed to.</param>
        <param name="timeout">The duration of the time-out, in minutes, after which the subscription expires. The time-out period must be in the range from 1 through 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Begins an asynchronous request to subscribe to pull notifications.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>An <b>IAsyncResult</b> object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToPullNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToPullNotificationsOnAllFolders (AsyncCallback callback, object state, int timeout, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToPullNotificationsOnAllFolders(class System.AsyncCallback callback, object state, int32 timeout, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPullNotificationsOnAllFolders(System.AsyncCallback,System.Object,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToPullNotificationsOnAllFolders (callback As AsyncCallback, state As Object, timeout As Integer, watermark As String, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToPullNotificationsOnAllFolders(AsyncCallback ^ callback, System::Object ^ state, int timeout, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="timeout">The duration of the time-out, in minutes, after which the subscription expires. The timeout period must be in the range from 1 through 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Begins an asynchronous request to subscribe to pull notifications on all folders in a specified user's mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>The event types to be subscribed to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToPushNotifications">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToPushNotifications (AsyncCallback callback, object state, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, Uri url, int frequency, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToPushNotifications(class System.AsyncCallback callback, object state, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, class System.Uri url, int32 frequency, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotifications(System.AsyncCallback,System.Object,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToPushNotifications (callback As AsyncCallback, state As Object, folderIds As IEnumerable(Of FolderId), url As Uri, frequency As Integer, watermark As String, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToPushNotifications(AsyncCallback ^ callback, System::Object ^ state, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, Uri ^ url, int frequency, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">A reference to the method to call when the corresponding asynchronous operation completes.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="folderIds">The folder identifiers of the folder to be subscribed to.</param>
        <param name="url">The URL of the web service endpoint to which the Exchange server should push events.</param>
        <param name="frequency">The interval, in minutes, at which the Exchange server is to contact the web service endpoint. This value must be in the range from 1 through 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Begins an asynchronous request to subscribe to push notifications. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotifications(System.AsyncCallback,System.Object,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A synchronization result object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToPushNotifications">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToPushNotifications (AsyncCallback callback, object state, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, Uri url, int frequency, string watermark, string callerData, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToPushNotifications(class System.AsyncCallback callback, object state, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, class System.Uri url, int32 frequency, string watermark, string callerData, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotifications(System.AsyncCallback,System.Object,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToPushNotifications (callback As AsyncCallback, state As Object, folderIds As IEnumerable(Of FolderId), url As Uri, frequency As Integer, watermark As String, callerData As String, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToPushNotifications(AsyncCallback ^ callback, System::Object ^ state, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, Uri ^ url, int frequency, System::String ^ watermark, System::String ^ callerData, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="callerData" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">A reference to the method to call when the corresponding asynchronous operation completes.</param>
        <param name="state">An object that contains state information for this request.</param>
        <param name="folderIds">The IDs of the folders to subscribe to.</param>
        <param name="url">The URL of the web service endpoint the Exchange server should push events to.</param>
        <param name="frequency">The frequency, in minutes, at which the Exchange server should contact the web service endpoint. This value must be between 1 and 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="callerData">Optional information that the caller requests be returned in the push notification response.</param>
        <param name="eventTypes">The event types to subscribe to.</param>
        <summary>             Begins an asynchronous request to subscribe to push notifications that includes a request for additional information to be returned in the push notification response.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotifications(System.AsyncCallback,System.Object,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>An  object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToPushNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToPushNotificationsOnAllFolders (AsyncCallback callback, object state, Uri url, int frequency, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToPushNotificationsOnAllFolders(class System.AsyncCallback callback, object state, class System.Uri url, int32 frequency, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotificationsOnAllFolders(System.AsyncCallback,System.Object,System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToPushNotificationsOnAllFolders (callback As AsyncCallback, state As Object, url As Uri, frequency As Integer, watermark As String, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToPushNotificationsOnAllFolders(AsyncCallback ^ callback, System::Object ^ state, Uri ^ url, int frequency, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">A reference to the method to call when the corresponding asynchronous operation completes.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="url">The URL of the web service endpoint to which the Exchange server should push events.</param>
        <param name="frequency">The interval, in minutes, at which the Exchange server is to contact the web service endpoint. This value must be in the range from 1 through 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Begins an asynchronous request to subscribe to push notifications on all folders in a specified user's mailbox. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotificationsOnAllFolders(System.AsyncCallback,System.Object,System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A synchronization result object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToPushNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToPushNotificationsOnAllFolders (AsyncCallback callback, object state, Uri url, int frequency, string watermark, string callerData, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToPushNotificationsOnAllFolders(class System.AsyncCallback callback, object state, class System.Uri url, int32 frequency, string watermark, string callerData, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotificationsOnAllFolders(System.AsyncCallback,System.Object,System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToPushNotificationsOnAllFolders (callback As AsyncCallback, state As Object, url As Uri, frequency As Integer, watermark As String, callerData As String, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToPushNotificationsOnAllFolders(AsyncCallback ^ callback, System::Object ^ state, Uri ^ url, int frequency, System::String ^ watermark, System::String ^ callerData, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="callerData" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">A reference to the method to call when the corresponding asynchronous operation completes.</param>
        <param name="state">An object that contains state information for this request.</param>
        <param name="url"> The URL of the web service endpoint to which the Exchange server should push events.</param>
        <param name="frequency">The frequency, in minutes, at which the Exchange server should contact the web service endpoint. This value must be between 1 and 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="callerData">Optional information that the caller requests be returned in the push notification response. </param>
        <param name="eventTypes">The event types to subscribe to.</param>
        <summary>             Begins an asynchronous request to subscribe to push notifications on all folders in the authenticated user's mailbox that includes a request for additional information to be returned in the push notification response.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToPushNotificationsOnAllFolders(System.AsyncCallback,System.Object,System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>An object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToStreamingNotifications">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToStreamingNotifications (AsyncCallback callback, object state, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToStreamingNotifications(class System.AsyncCallback callback, object state, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToStreamingNotifications(System.AsyncCallback,System.Object,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToStreamingNotifications (callback As AsyncCallback, state As Object, folderIds As IEnumerable(Of FolderId), ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToStreamingNotifications(AsyncCallback ^ callback, System::Object ^ state, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="folderIds">The folder IDs of the folders to be subscribed to.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Begins an asynchronous request to subscribe to streaming notifications.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A synchronization result object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSubscribeToStreamingNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSubscribeToStreamingNotificationsOnAllFolders (AsyncCallback callback, object state, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSubscribeToStreamingNotificationsOnAllFolders(class System.AsyncCallback callback, object state, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSubscribeToStreamingNotificationsOnAllFolders(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSubscribeToStreamingNotificationsOnAllFolders (callback As AsyncCallback, state As Object, ParamArray eventTypes As EventType()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSubscribeToStreamingNotificationsOnAllFolders(AsyncCallback ^ callback, System::Object ^ state, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Begins an asynchronous request to subscribe to streaming notifications on all folders in a specified user's mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>An <b>IAsyncResult</b> object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSyncFolderHierarchy">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSyncFolderHierarchy (AsyncCallback callback, object state, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSyncFolderHierarchy(class System.AsyncCallback callback, object state, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSyncFolderHierarchy(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.PropertySet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSyncFolderHierarchy(AsyncCallback ^ callback, System::Object ^ state, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::String ^ syncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="syncState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="propertySet">The set of properties to be retrieved for synchronized items.</param>
        <param name="syncState">The optional synchronization state representing the point in time at which the synchronization is to start.</param>
        <summary>Begins a request to synchronize the entire folder hierarchy of a specified mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>An <b>IAsynchResult</b> object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSyncFolderHierarchy">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSyncFolderHierarchy (AsyncCallback callback, object state, Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSyncFolderHierarchy(class System.AsyncCallback callback, object state, class Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSyncFolderHierarchy(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.PropertySet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSyncFolderHierarchy(AsyncCallback ^ callback, System::Object ^ state, Microsoft::Exchange::WebServices::Data::FolderId ^ syncFolderId, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::String ^ syncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="syncFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="syncState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="syncFolderId">The identifier of the folder containing the items to be synchronized. A a null reference (Nothing in Visual Basic) value indicates that the root folder of the mailbox should be synchronized.</param>
        <param name="propertySet">The set of properties to be retrieved for synchronized items.</param>
        <param name="syncState">The optional synchronization state representing the point in time at which the synchronization is to start.</param>
        <summary>Begins an asynchronous request to synchronize the subfolders of a specified folder hierarchy.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>An <b>IAsynchResult</b> object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSyncFolderItems">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSyncFolderItems (AsyncCallback callback, object state, Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; ignoredItemIds, int maxChangesReturned, Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope syncScope, string syncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSyncFolderItems(class System.AsyncCallback callback, object state, class Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; ignoredItemIds, int32 maxChangesReturned, valuetype Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope syncScope, string syncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BeginSyncFolderItems(System.AsyncCallback,System.Object,Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.PropertySet,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},System.Int32,Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSyncFolderItems(AsyncCallback ^ callback, System::Object ^ state, Microsoft::Exchange::WebServices::Data::FolderId ^ syncFolderId, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ ignoredItemIds, int maxChangesReturned, Microsoft::Exchange::WebServices::Data::SyncFolderItemsScope syncScope, System::String ^ syncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="syncFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="ignoredItemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="maxChangesReturned" Type="System.Int32" />
        <Parameter Name="syncScope" Type="Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope" />
        <Parameter Name="syncState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="callback">The <b>AsyncCallback</b> delegate.</param>
        <param name="state">An object that contains state information for the specified request.</param>
        <param name="syncFolderId">The identifier of the folder containing the items to be synchronized.</param>
        <param name="propertySet">The set of properties to be retrieved for synchronized items.</param>
        <param name="ignoredItemIds">An optional collection of <see cref="T:Microsoft.Exchange.WebServices.Data.ItemId" /> objects that should be ignored.</param>
        <param name="maxChangesReturned">The maximum number of changes that can be returned in the result set.</param>
        <param name="syncScope">The scope of items that can be returned in the result set.</param>
        <param name="syncState">The optional synchronization state representing the point in time at which the synchronization is to start.</param>
        <summary>Begins an asynchronous request to synchronize the items contained in a specified folder.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>An <b>IAsyncResult</b> object that references the asynchronous request.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetItemResponse&gt; BindToItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.PropertySet propertySet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetItemResponse&gt; BindToItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.BindToItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.PropertySet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetItemResponse ^&gt; ^ BindToItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be bound.</param>
        <param name="propertySet">The set of properties to be loaded.</param>
        <summary>Binds to multiple items in a single call to Exchange Web Services (EWS).</summary>
        <returns>A collection of results for each of the specified items.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertId">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.AlternateIdBase ConvertId (Microsoft.Exchange.WebServices.Data.AlternateIdBase id, Microsoft.Exchange.WebServices.Data.IdFormat destinationFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.AlternateIdBase ConvertId(class Microsoft.Exchange.WebServices.Data.AlternateIdBase id, valuetype Microsoft.Exchange.WebServices.Data.IdFormat destinationFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ConvertId(Microsoft.Exchange.WebServices.Data.AlternateIdBase,Microsoft.Exchange.WebServices.Data.IdFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertId (id As AlternateIdBase, destinationFormat As IdFormat) As AlternateIdBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::AlternateIdBase ^ ConvertId(Microsoft::Exchange::WebServices::Data::AlternateIdBase ^ id, Microsoft::Exchange::WebServices::Data::IdFormat destinationFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.AlternateIdBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Microsoft.Exchange.WebServices.Data.AlternateIdBase" />
        <Parameter Name="destinationFormat" Type="Microsoft.Exchange.WebServices.Data.IdFormat" />
      </Parameters>
      <Docs>
        <param name="id">The ID to be converted.</param>
        <param name="destinationFormat">The destination format for the ID.</param>
        <summary>Converts an ID from one format to another format in a single Exchange Web Services (EWS) call.</summary>
        <returns>The converted ID.</returns>
        <remarks>
          <para>The ConvertId operation does not work as expected when converting public folder identifiers from the EWS identifier to the store identifier in Exchange Online or on-premises versions of Exchange starting with Exchange Server 2013. You can manually update the identifier that is returned as a <a href="http://msdn.microsoft.com/EN-US/library/bb799665(v=exchg.150).aspx">workaround</a></para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIds">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ConvertIdResponse&gt; ConvertIds (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.AlternateIdBase&gt; ids, Microsoft.Exchange.WebServices.Data.IdFormat destinationFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ConvertIdResponse&gt; ConvertIds(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.AlternateIdBase&gt; ids, valuetype Microsoft.Exchange.WebServices.Data.IdFormat destinationFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ConvertIds(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.AlternateIdBase},Microsoft.Exchange.WebServices.Data.IdFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertIds (ids As IEnumerable(Of AlternateIdBase), destinationFormat As IdFormat) As ServiceResponseCollection(Of ConvertIdResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ConvertIdResponse ^&gt; ^ ConvertIds(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::AlternateIdBase ^&gt; ^ ids, Microsoft::Exchange::WebServices::Data::IdFormat destinationFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ConvertIdResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.AlternateIdBase&gt;" />
        <Parameter Name="destinationFormat" Type="Microsoft.Exchange.WebServices.Data.IdFormat" />
      </Parameters>
      <Docs>
        <param name="ids">The IDs to be converted.</param>
        <param name="destinationFormat">The destination format.</param>
        <summary>Converts multiple IDs from one format to another in a single call to Exchange Web Services (EWS).</summary>
        <returns>A collection of conversion results for each specified ID.</returns>
        <remarks>
          <para>The ConvertId operation does not work as expected when converting public folder identifiers from the EWS identifier to the store identifier in Exchange Online or on-premises versions of Exchange starting with Exchange Server 2013. You can manually update the identifier that is returned as a <a href="http://msdn.microsoft.com/EN-US/library/bb799665(v=exchg.150).aspx">workaround</a></para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; CopyItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; CopyItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CopyItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyItems (itemIds As IEnumerable(Of ItemId), destinationFolderId As FolderId) As ServiceResponseCollection(Of MoveCopyItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::MoveCopyItemResponse ^&gt; ^ CopyItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be copied.</param>
        <param name="destinationFolderId">The ID of the folder to which the specified items are to be copied.</param>
        <summary>Copies multiple items in a single call to Exchange Web Services (EWS).</summary>
        <returns>A collection of copy results for each of the specified items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; CopyItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId, bool returnNewItemIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; CopyItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId, bool returnNewItemIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CopyItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyItems (itemIds As IEnumerable(Of ItemId), destinationFolderId As FolderId, returnNewItemIds As Boolean) As ServiceResponseCollection(Of MoveCopyItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::MoveCopyItemResponse ^&gt; ^ CopyItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId, bool returnNewItemIds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="returnNewItemIds" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be copied.</param>
        <param name="destinationFolderId">The ID of the folder to which the specified items are to be copied.</param>
        <param name="returnNewItemIds">
          <b>true</b> to return new item identifiers for the copied items; otherwise, <b>false</b> to return the original item identifiers.</param>
        <summary>Copies multiple items in a single call to Exchange Web Services (EWS).This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A collection of copy results for each of the specified item IDs.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; CopyItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; CopyItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CopyItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.FolderId)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyItemsInConversations (idLastSyncTimePairs As IEnumerable(Of KeyValuePair(Of ConversationId, Nullable(Of DateTime))), contextFolderId As FolderId, destinationFolderId As FolderId) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ CopyItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">The identifier of the conversation whose items are to be copied to the destination folder, and the date and time that the conversation was last synchronized. Items that were received after that date will not be copied.</param>
        <param name="contextFolderId">The context folder identifier.</param>
        <param name="destinationFolderId">The destination folder identifier.</param>
        <summary>Copies the items in a specified conversation to a specified destination folder.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; CreateItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt; items, Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Nullable&lt;Microsoft.Exchange.WebServices.Data.MessageDisposition&gt; messageDisposition, Nullable&lt;Microsoft.Exchange.WebServices.Data.SendInvitationsMode&gt; sendInvitationsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; CreateItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; items, class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MessageDisposition&gt; messageDisposition, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.SendInvitationsMode&gt; sendInvitationsMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CreateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsMode})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateItems (items As IEnumerable(Of Item), parentFolderId As FolderId, messageDisposition As Nullable(Of MessageDisposition), sendInvitationsMode As Nullable(Of SendInvitationsMode)) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ CreateItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ items, Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Nullable&lt;Microsoft::Exchange::WebServices::Data::MessageDisposition&gt; messageDisposition, Nullable&lt;Microsoft::Exchange::WebServices::Data::SendInvitationsMode&gt; sendInvitationsMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt;" />
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="messageDisposition" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MessageDisposition&gt;" />
        <Parameter Name="sendInvitationsMode" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.SendInvitationsMode&gt;" />
      </Parameters>
      <Docs>
        <param name="items">The items to be created.</param>
        <param name="parentFolderId">The ID of the folder in which the newly created items are to be placed. If this parameter is a null reference (Nothing in Visual Basic), items are created in their default folders.</param>
        <param name="messageDisposition">One of the enumeration values that specifies the disposition mode for <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" /> objects. This parameter is required for items that contain at least one <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" /> instance.</param>
        <param name="sendInvitationsMode">One of the enumeration values that specifies whether and how invitations should be sent for items of type <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" />. This parameter is required for items that contain at least one <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" /> instance.</param>
        <summary>Creates multiple items in a single Exchange Web Services (EWS) call.</summary>
        <returns>A collection of creation results for each of the specified items.</returns>
        <remarks>
          <para>The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.CreateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsMode})" /> method supports the <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" />, <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" />, <see cref="T:Microsoft.Exchange.WebServices.Data.Contact" />, <see cref="T:Microsoft.Exchange.WebServices.Data.PostItem" />, <see cref="T:Microsoft.Exchange.WebServices.Data.Task" />, and <see cref="T:Microsoft.Exchange.WebServices.Data.Item" /> types. This method does not support items that have unsaved attachments.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateTimePrecision">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.DateTimePrecision DateTimePrecision { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Exchange.WebServices.Data.DateTimePrecision DateTimePrecision" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.DateTimePrecision" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimePrecision As DateTimePrecision" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Exchange::WebServices::Data::DateTimePrecision DateTimePrecision { Microsoft::Exchange::WebServices::Data::DateTimePrecision get(); void set(Microsoft::Exchange::WebServices::Data::DateTimePrecision value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.DateTimePrecision</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or set the degree of precision used for <b>DateTime</b> values returned from Exchange Web Services (EWS).This property was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <value>A <see cref="T:Microsoft.Exchange.WebServices.Data.DateTimePrecision" /> object that specifies the degree of precision used for <b>DateTime</b> values.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DeleteItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.DeleteMode deleteMode, Nullable&lt;Microsoft.Exchange.WebServices.Data.SendCancellationsMode&gt; sendCancellationsMode, Nullable&lt;Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence&gt; affectedTaskOccurrences);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DeleteItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, valuetype Microsoft.Exchange.WebServices.Data.DeleteMode deleteMode, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.SendCancellationsMode&gt; sendCancellationsMode, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence&gt; affectedTaskOccurrences) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DeleteItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.DeleteMode,System.Nullable{Microsoft.Exchange.WebServices.Data.SendCancellationsMode},System.Nullable{Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ DeleteItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::DeleteMode deleteMode, Nullable&lt;Microsoft::Exchange::WebServices::Data::SendCancellationsMode&gt; sendCancellationsMode, Nullable&lt;Microsoft::Exchange::WebServices::Data::AffectedTaskOccurrence&gt; affectedTaskOccurrences);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="deleteMode" Type="Microsoft.Exchange.WebServices.Data.DeleteMode" />
        <Parameter Name="sendCancellationsMode" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.SendCancellationsMode&gt;" />
        <Parameter Name="affectedTaskOccurrences" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence&gt;" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be deleted.</param>
        <param name="deleteMode">One of the enumeration values that specifies the deletion mode.</param>
        <param name="sendCancellationsMode">One of the enumeration values that specifies whether cancellation messages should be sent. This parameter is required if any of the item IDs represents an <see cref="F:Microsoft.Exchange.WebServices.Data.DefaultExtendedPropertySet.Appointment" /> instance.</param>
        <param name="affectedTaskOccurrences">One of the enumeration values that specifies which instance of a recurring task should be deleted. This parameter is required if any of the item IDs represents a <see cref="T:Microsoft.Exchange.WebServices.Data.Task" /> instance.</param>
        <summary>Deletes multiple items in a single call to Exchange Web Services (EWS).</summary>
        <returns>A collection of deletion results for each of the specified item IDs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DeleteItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.DeleteMode deleteMode, Nullable&lt;Microsoft.Exchange.WebServices.Data.SendCancellationsMode&gt; sendCancellationsMode, Nullable&lt;Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence&gt; affectedTaskOccurrences, bool suppressReadReceipt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DeleteItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, valuetype Microsoft.Exchange.WebServices.Data.DeleteMode deleteMode, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.SendCancellationsMode&gt; sendCancellationsMode, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence&gt; affectedTaskOccurrences, bool suppressReadReceipt) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DeleteItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.DeleteMode,System.Nullable{Microsoft.Exchange.WebServices.Data.SendCancellationsMode},System.Nullable{Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence},System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ DeleteItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::DeleteMode deleteMode, Nullable&lt;Microsoft::Exchange::WebServices::Data::SendCancellationsMode&gt; sendCancellationsMode, Nullable&lt;Microsoft::Exchange::WebServices::Data::AffectedTaskOccurrence&gt; affectedTaskOccurrences, bool suppressReadReceipt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="deleteMode" Type="Microsoft.Exchange.WebServices.Data.DeleteMode" />
        <Parameter Name="sendCancellationsMode" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.SendCancellationsMode&gt;" />
        <Parameter Name="affectedTaskOccurrences" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence&gt;" />
        <Parameter Name="suppressReadReceipt" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be deleted.</param>
        <param name="deleteMode">One of the enumeration values that specifies the deletion mode.</param>
        <param name="sendCancellationsMode">One of the enumeration values that specifies whether cancellation messages should be sent. This parameter is required if any of the item IDs represents an <see cref="F:Microsoft.Exchange.WebServices.Data.DefaultExtendedPropertySet.Appointment" /> instance.</param>
        <param name="affectedTaskOccurrences">One of the enumeration values that specifies which instance of a recurring task should be deleted. This parameter is required if any of the item IDs represents a <see cref="T:Microsoft.Exchange.WebServices.Data.Task" /> instance.</param>
        <param name="suppressReadReceipt">
          <b>true</b> if read receipts should not be sent for any items being deleted that have requested a read receipt; otherwise, <b>false</b>.</param>
        <summary>
            Deletes multiple items in a single call to EWS.
            </summary>
        <returns>A collection of deletion results for each of the specified item IDs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DeleteItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, Microsoft.Exchange.WebServices.Data.DeleteMode deleteMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DeleteItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, valuetype Microsoft.Exchange.WebServices.Data.DeleteMode deleteMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DeleteItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.DeleteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ DeleteItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, Microsoft::Exchange::WebServices::Data::DeleteMode deleteMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="deleteMode" Type="Microsoft.Exchange.WebServices.Data.DeleteMode" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">The identifier of the conversation whose items are to be deleted, and the date and time that the conversation was last synchronized. Items that were received after that date will not be deleted.</param>
        <param name="contextFolderId">The context folder identifier.</param>
        <param name="deleteMode">The deletion mode.</param>
        <summary>Deletes the items in a specified conversation.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAlwaysCategorizeItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DisableAlwaysCategorizeItemsInConversations (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, bool processSynchronously);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DisableAlwaysCategorizeItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, bool processSynchronously) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DisableAlwaysCategorizeItemsInConversations(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationId},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableAlwaysCategorizeItemsInConversations (conversationId As IEnumerable(Of ConversationId), processSynchronously As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ DisableAlwaysCategorizeItemsInConversations(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^&gt; ^ conversationId, bool processSynchronously);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationId" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt;" />
        <Parameter Name="processSynchronously" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conversationId">The conversation identifier.</param>
        <param name="processSynchronously">
          <b>true</b> if the method returns after it has finished disabling automatic categorization and removing the categories from existing items in the conversation (rather than returning immediately); otherwise,  <b>false</b> to return immediately.</param>
        <summary>Disables automatic categorization of new items that are received in a specified conversation.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS). </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAlwaysDeleteItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DisableAlwaysDeleteItemsInConversations (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, bool processSynchronously);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DisableAlwaysDeleteItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, bool processSynchronously) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DisableAlwaysDeleteItemsInConversations(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationId},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableAlwaysDeleteItemsInConversations (conversationId As IEnumerable(Of ConversationId), processSynchronously As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ DisableAlwaysDeleteItemsInConversations(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^&gt; ^ conversationId, bool processSynchronously);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationId" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt;" />
        <Parameter Name="processSynchronously" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conversationId">The conversation identifier.</param>
        <param name="processSynchronously">
          <b>true</b> if the method returns after it has finished disabling automatic moving of items from a conversation to the Deleted Items folder and has restored the deleted items to their original folders (rather than returning immediately); otherwise, <b>false</b>.</param>
        <summary>Disables the automatic moving of items from a specified conversation to the Deleted Items folder.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAlwaysMoveItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DisableAlwaysMoveItemsInConversations (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationIds, bool processSynchronously);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; DisableAlwaysMoveItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationIds, bool processSynchronously) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DisableAlwaysMoveItemsInConversations(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationId},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableAlwaysMoveItemsInConversations (conversationIds As IEnumerable(Of ConversationId), processSynchronously As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ DisableAlwaysMoveItemsInConversations(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^&gt; ^ conversationIds, bool processSynchronously);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt;" />
        <Parameter Name="processSynchronously" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conversationIds">A collection of conversation identifiers.</param>
        <param name="processSynchronously">
          <b>true</b> if the method returns after it has finished disabling automatic moving of items from a conversation to the specified folder (rather than returning immediately); otherwise, <b>false</b>.</param>
        <summary>Disables the automatic moving of items from a specified conversation to a specified folder.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableApp">
      <MemberSignature Language="C#" Value="public void DisableApp (string id, Microsoft.Exchange.WebServices.Data.DisableReasonType disableReason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableApp(string id, valuetype Microsoft.Exchange.WebServices.Data.DisableReasonType disableReason) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DisableApp(System.String,Microsoft.Exchange.WebServices.Data.DisableReasonType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableApp (id As String, disableReason As DisableReasonType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableApp(System::String ^ id, Microsoft::Exchange::WebServices::Data::DisableReasonType disableReason);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="disableReason" Type="Microsoft.Exchange.WebServices.Data.DisableReasonType" />
      </Parameters>
      <Docs>
        <param name="id">The application identifier.</param>
        <param name="disableReason">The reason the app is disabled.</param>
        <summary>             Disables a client extension.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.DisableApp(System.String,Microsoft.Exchange.WebServices.Data.DisableReasonType)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <remarks>
          <para>Exception will be thrown for errors. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAlwaysCategorizeItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; EnableAlwaysCategorizeItemsInConversations (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, System.Collections.Generic.IEnumerable&lt;string&gt; categories, bool processSynchronously);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; EnableAlwaysCategorizeItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; categories, bool processSynchronously) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EnableAlwaysCategorizeItemsInConversations(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationId},System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnableAlwaysCategorizeItemsInConversations (conversationId As IEnumerable(Of ConversationId), categories As IEnumerable(Of String), processSynchronously As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ EnableAlwaysCategorizeItemsInConversations(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^&gt; ^ conversationId, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ categories, bool processSynchronously);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationId" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt;" />
        <Parameter Name="categories" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="processSynchronously" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conversationId">The conversation identifier.</param>
        <param name="categories">The categories to be applied to items in the specified conversation automatically.</param>
        <param name="processSynchronously">
          <b>true</b> if the method returns after it has finished enabling categorization and adding the categories to existing items in the specified conversation (rather than returning immediately); otherwise, <b>false</b>.</param>
        <summary>Enables the automatic categorization of items in a specified conversation.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAlwaysDeleteItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; EnableAlwaysDeleteItemsInConversations (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, bool processSynchronously);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; EnableAlwaysDeleteItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, bool processSynchronously) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EnableAlwaysDeleteItemsInConversations(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationId},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnableAlwaysDeleteItemsInConversations (conversationId As IEnumerable(Of ConversationId), processSynchronously As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ EnableAlwaysDeleteItemsInConversations(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^&gt; ^ conversationId, bool processSynchronously);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationId" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt;" />
        <Parameter Name="processSynchronously" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conversationId">The conversation identifier.</param>
        <param name="processSynchronously">
          <b>true</b> if the method returns after it has finished enabling the automatic moving of items from the specified conversation to the Deleted Items folder and has moved existing items from the conversation to the Deleted Items folder; otherwise, <b>false</b> to indicate that the method is to return immediately.</param>
        <summary>Enables the automatic moving of items from a specified conversation to the Deleted Items folder.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS). </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAlwaysMoveItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; EnableAlwaysMoveItemsInConversations (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId, bool processSynchronously);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; EnableAlwaysMoveItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationId&gt; conversationId, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId, bool processSynchronously) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EnableAlwaysMoveItemsInConversations(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationId},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnableAlwaysMoveItemsInConversations (conversationId As IEnumerable(Of ConversationId), destinationFolderId As FolderId, processSynchronously As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ EnableAlwaysMoveItemsInConversations(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^&gt; ^ conversationId, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId, bool processSynchronously);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationId" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationId&gt;" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="processSynchronously" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conversationId">A conversation identifier.</param>
        <param name="destinationFolderId">A folder identifier.</param>
        <param name="processSynchronously">
          <b>true</b> to indicate that the method should return after it has finished enabling the automatic moving of items from the specified conversation to the target folder and has moved existing conversation items to the target folder (rather than returning immediately); otherwise, <b>false</b>.</param>
        <summary>Enables the automatic move of new and existing items in a conversation to a target folder.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableScpLookup">
      <MemberSignature Language="C#" Value="public bool EnableScpLookup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScpLookup" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.EnableScpLookup" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScpLookup As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScpLookup { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether Exchange Web Services (EWS) should perform a service connection point (SCP) lookup when it is determining the service URL.</summary>
        <value>
          <b>true</b> if the <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService" /> instance should perform an SCP lookup; otherwise, <b>false</b>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetNonIndexableItemDetails">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse EndGetNonIndexableItemDetails (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse EndGetNonIndexableItemDetails(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndGetNonIndexableItemDetails(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetNonIndexableItemDetails (asyncResult As IAsyncResult) As GetNonIndexableItemDetailsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemDetailsResponse ^ EndGetNonIndexableItemDetails(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Contains state information to pass to the Exchange server.</param>
        <summary>
            Asynchronous call requesting metadata about folder items that could not be indexed.
            </summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetNonIndexableItemStatistics">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse EndGetNonIndexableItemStatistics (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse EndGetNonIndexableItemStatistics(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndGetNonIndexableItemStatistics(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetNonIndexableItemStatistics (asyncResult As IAsyncResult) As GetNonIndexableItemStatisticsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemStatisticsResponse ^ EndGetNonIndexableItemStatistics(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Contains state information to pass to the Exchange server.</param>
        <summary>
            Asynchronous call requesting statistics about folder items that could not be indexed.
            </summary>
        <returns>A response object containing statistical information on items that could not be indexed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSearchMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; EndSearchMailboxes (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; EndSearchMailboxes(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSearchMailboxes(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSearchMailboxes (asyncResult As IAsyncResult) As ServiceResponseCollection(Of SearchMailboxesResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::SearchMailboxesResponse ^&gt; ^ EndSearchMailboxes(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">State information to pass to the Exchange server.</param>
        <summary>             Requests a search mailboxes query asynchronously.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSearchMailboxes(System.IAsyncResult)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>An object containing the results of a mailbox search.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSubscribeToPullNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PullSubscription EndSubscribeToPullNotifications (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PullSubscription EndSubscribeToPullNotifications(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSubscribeToPullNotifications(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSubscribeToPullNotifications (asyncResult As IAsyncResult) As PullSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PullSubscription ^ EndSubscribeToPullNotifications(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PullSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <b>IAsyncResult</b> object that references the specified asynchronous request.</param>
        <summary>Ends an asynchronous request to subscribe to pull notifications in the authenticated user's mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A <b>PullSubscription</b> object representing the new subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSubscribeToPushNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PushSubscription EndSubscribeToPushNotifications (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PushSubscription EndSubscribeToPushNotifications(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSubscribeToPushNotifications(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSubscribeToPushNotifications (asyncResult As IAsyncResult) As PushSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PushSubscription ^ EndSubscribeToPushNotifications(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PushSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <b>IAsyncResult</b> object that references the specified asynchronous request.</param>
        <summary>Ends an asynchronous request to subscribe to push notifications in a specified user's mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A <b>PushSubscription</b> object representing the new subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSubscribeToStreamingNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.StreamingSubscription EndSubscribeToStreamingNotifications (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.StreamingSubscription EndSubscribeToStreamingNotifications(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSubscribeToStreamingNotifications(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSubscribeToStreamingNotifications (asyncResult As IAsyncResult) As StreamingSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::StreamingSubscription ^ EndSubscribeToStreamingNotifications(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.StreamingSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <b>IAsyncResult</b> object that references the specified asynchronous request.</param>
        <summary>Ends an asynchronous request to subscribe to streaming notifications in a specified user's mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A <b>StreamingSubscription</b> object representing the new subscription.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSyncFolderHierarchy">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.FolderChange&gt; EndSyncFolderHierarchy (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ChangeCollection`1&lt;class Microsoft.Exchange.WebServices.Data.FolderChange&gt; EndSyncFolderHierarchy(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSyncFolderHierarchy(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSyncFolderHierarchy (asyncResult As IAsyncResult) As ChangeCollection(Of FolderChange)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ChangeCollection&lt;Microsoft::Exchange::WebServices::Data::FolderChange ^&gt; ^ EndSyncFolderHierarchy(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.FolderChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <b>IAsynResult</b> object that references the specified asynchronous request.</param>
        <summary>Ends an asynchronous request to synchronize a specified folder hierarchy of a mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.ChangeCollection`1" /> collection of <see cref="T:Microsoft.Exchange.WebServices.Data.FolderChange" /> objects containing the list of changes that occurred in the specified folder hierarchy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSyncFolderItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.ItemChange&gt; EndSyncFolderItems (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ChangeCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ItemChange&gt; EndSyncFolderItems(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.EndSyncFolderItems(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSyncFolderItems (asyncResult As IAsyncResult) As ChangeCollection(Of ItemChange)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ChangeCollection&lt;Microsoft::Exchange::WebServices::Data::ItemChange ^&gt; ^ EndSyncFolderItems(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.ItemChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <b>IAsynResult</b> object that references the specified asynchronous request.</param>
        <summary>Ends an asynchronous request to synchronize the items in a specified folder of a mailbox.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.ChangeCollection`1" /> collection of <see cref="T:Microsoft.Exchange.WebServices.Data.ItemChange" /> objects containing the list of changes that occurred in the specified folder hierarchy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandGroup">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup (Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup(class Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ExpandGroup(Microsoft.Exchange.WebServices.Data.EmailAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ExpandGroupResults ^ ExpandGroup(Microsoft::Exchange::WebServices::Data::EmailAddress ^ emailAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ExpandGroupResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailAddress" Type="Microsoft.Exchange.WebServices.Data.EmailAddress" />
      </Parameters>
      <Docs>
        <param name="emailAddress">The email address of the group.</param>
        <summary>Expands a group identified by a specified email address.</summary>
        <returns>The group members.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandGroup">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup (Microsoft.Exchange.WebServices.Data.ItemId groupId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup(class Microsoft.Exchange.WebServices.Data.ItemId groupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ExpandGroup(Microsoft.Exchange.WebServices.Data.ItemId)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExpandGroup (groupId As ItemId) As ExpandGroupResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ExpandGroupResults ^ ExpandGroup(Microsoft::Exchange::WebServices::Data::ItemId ^ groupId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ExpandGroupResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="Microsoft.Exchange.WebServices.Data.ItemId" />
      </Parameters>
      <Docs>
        <param name="groupId">The ID of the group to be expanded.</param>
        <summary>Expands a group identified by a specified group ID.</summary>
        <returns>The group members.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandGroup">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup (string smtpAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup(string smtpAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ExpandGroup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExpandGroup (smtpAddress As String) As ExpandGroupResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ExpandGroupResults ^ ExpandGroup(System::String ^ smtpAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ExpandGroupResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smtpAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="smtpAddress">The SMTP address of the group to be expanded.</param>
        <summary>Expands a group identified by a specified group SMTP address.</summary>
        <returns>The group members.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandGroup">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup (string address, string routingType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ExpandGroupResults ExpandGroup(string address, string routingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ExpandGroup(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExpandGroup (address As String, routingType As String) As ExpandGroupResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ExpandGroupResults ^ ExpandGroup(System::String ^ address, System::String ^ routingType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ExpandGroupResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="routingType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">The SMTP address of the group to be expanded.</param>
        <param name="routingType">The routing type of the address of the group to be expanded.</param>
        <summary>Expands a group identified by a specified group SMTP address and the routing type of that address.</summary>
        <returns>The group members.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileAttachmentContentHandler">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.IFileAttachmentContentHandler FileAttachmentContentHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Exchange.WebServices.Data.IFileAttachmentContentHandler FileAttachmentContentHandler" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.FileAttachmentContentHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property FileAttachmentContentHandler As IFileAttachmentContentHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Exchange::WebServices::Data::IFileAttachmentContentHandler ^ FileAttachmentContentHandler { Microsoft::Exchange::WebServices::Data::IFileAttachmentContentHandler ^ get(); void set(Microsoft::Exchange::WebServices::Data::IFileAttachmentContentHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.IFileAttachmentContentHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a file attachment content handler.</summary>
        <value>A file attachment content handler.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAppointments">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Appointment&gt; FindAppointments (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.CalendarView calendarView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Appointment&gt; FindAppointments(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.CalendarView calendarView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindAppointments(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.CalendarView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Appointment ^&gt; ^ FindAppointments(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::CalendarView ^ calendarView);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Appointment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="calendarView" Type="Microsoft.Exchange.WebServices.Data.CalendarView" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the calendar folder to be searched for items.</param>
        <param name="calendarView">The calendar view that controls the number of appointments that are returned.</param>
        <summary>Obtains a list of appointments by searching the contents of a specified folder. </summary>
        <returns>A collection of appointments that represents the contents of the specified folder.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAppointments">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Appointment&gt; FindAppointments (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, Microsoft.Exchange.WebServices.Data.CalendarView calendarView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Appointment&gt; FindAppointments(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, class Microsoft.Exchange.WebServices.Data.CalendarView calendarView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindAppointments(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,Microsoft.Exchange.WebServices.Data.CalendarView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Appointment ^&gt; ^ FindAppointments(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, Microsoft::Exchange::WebServices::Data::CalendarView ^ calendarView);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Appointment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="calendarView" Type="Microsoft.Exchange.WebServices.Data.CalendarView" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the calendar folder to be searched for items.</param>
        <param name="calendarView">The calendar view that controls the number of appointments that are returned.</param>
        <summary>Obtains a list of appointments by searching the contents of a specified folder. </summary>
        <returns>A collection of appointments that represents the contents of the specified folder.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindConversation">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Microsoft.Exchange.WebServices.Data.Conversation&gt; FindConversation (Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.FolderId folderId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class Microsoft.Exchange.WebServices.Data.Conversation&gt; FindConversation(class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.FolderId folderId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;Microsoft::Exchange::WebServices::Data::Conversation ^&gt; ^ FindConversation(Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::FolderId ^ folderId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Microsoft.Exchange.WebServices.Data.Conversation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="folderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
      </Parameters>
      <Docs>
        <param name="view">The view controlling the number of conversations returned.</param>
        <param name="folderId">The ID of the folder in which to search for conversations.</param>
        <summary>             Retrieves a collection of all conversations in the specified folder.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Microsoft Exchange Server 2010 Service Pack 1 (SP1).</summary>
        <returns>A collection of conversation objects.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindConversation">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Microsoft.Exchange.WebServices.Data.Conversation&gt; FindConversation (Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.FolderId folderId, string queryString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class Microsoft.Exchange.WebServices.Data.Conversation&gt; FindConversation(class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.FolderId folderId, string queryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;Microsoft::Exchange::WebServices::Data::Conversation ^&gt; ^ FindConversation(Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::FolderId ^ folderId, System::String ^ queryString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Microsoft.Exchange.WebServices.Data.Conversation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="folderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="view">The view controlling the number of conversations returned.</param>
        <param name="folderId">The ID of the folder in which to search for conversations.</param>
        <param name="queryString">The query string for which the search is being performed.</param>
        <summary>             Retrieves a collection of all conversations in the specified folder according to the specified query.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId,System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of conversation objects.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindConversation">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindConversationResults FindConversation (Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.FolderId folderId, string queryString, bool returnHighlightTerms);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindConversationResults FindConversation(class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.FolderId folderId, string queryString, bool returnHighlightTerms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindConversationResults ^ FindConversation(Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::FolderId ^ folderId, System::String ^ queryString, bool returnHighlightTerms);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindConversationResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="folderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="returnHighlightTerms" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="view">The view controlling the number of conversations returned.</param>
        <param name="folderId">The ID of the folder in which to search for conversations.</param>
        <param name="queryString">The query string for which the search is being performed.</param>
        <param name="returnHighlightTerms">Flag indicating whether highlighted terms should be returned in the response.</param>
        <summary>             Searches for and retrieves a collection of conversations in the specified folder according to the specified query. Along with conversations, a list of highlighted terms are returned.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of conversation objects.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindConversation">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindConversationResults FindConversation (Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.FolderId folderId, string queryString, bool returnHighlightTerms, Nullable&lt;Microsoft.Exchange.WebServices.Data.MailboxSearchLocation&gt; mailboxScope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindConversationResults FindConversation(class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.FolderId folderId, string queryString, bool returnHighlightTerms, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MailboxSearchLocation&gt; mailboxScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean,System.Nullable{Microsoft.Exchange.WebServices.Data.MailboxSearchLocation})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindConversationResults ^ FindConversation(Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::FolderId ^ folderId, System::String ^ queryString, bool returnHighlightTerms, Nullable&lt;Microsoft::Exchange::WebServices::Data::MailboxSearchLocation&gt; mailboxScope);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindConversationResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="folderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="returnHighlightTerms" Type="System.Boolean" />
        <Parameter Name="mailboxScope" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MailboxSearchLocation&gt;" />
      </Parameters>
      <Docs>
        <param name="view">The view controlling the number of conversations returned.</param>
        <param name="folderId">The ID of the folder in which to search for conversations.</param>
        <param name="queryString">The query string for which the search is being performed.</param>
        <param name="returnHighlightTerms">Flag indicating whether highlighted terms should be returned in the response.</param>
        <param name="mailboxScope">The target mailbox is a primary mailbox, an archive mailbox, or both.</param>
        <summary>             Searches for and retrieves a collection of conversations in the specified folder according to the specified query. Along with conversations, a list of highlighted terms are returned. The target folder(s) may be a primary mailbox, an archive mailbox, or both.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindConversation(Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean,System.Nullable{Microsoft.Exchange.WebServices.Data.MailboxSearchLocation})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of conversation objects.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.FolderView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.FolderView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindFolders(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.FolderView)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindFolders (parentFolderId As FolderId, view As FolderView) As FindFoldersResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindFoldersResults ^ FindFolders(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::FolderView ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindFoldersResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.FolderView" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder whose subfolders are to be searched for folders.</param>
        <param name="view">The view that controls the number of folders that are returned.</param>
        <summary>Obtains a list of folders by searching the subfolders of a specified folder.</summary>
        <returns>An object that represents the results of the search operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, Microsoft.Exchange.WebServices.Data.FolderView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, class Microsoft.Exchange.WebServices.Data.FolderView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindFolders(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,Microsoft.Exchange.WebServices.Data.FolderView)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindFolders (parentFolderName As WellKnownFolderName, view As FolderView) As FindFoldersResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindFoldersResults ^ FindFolders(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, Microsoft::Exchange::WebServices::Data::FolderView ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindFoldersResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.FolderView" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder whose subfolders are to be searched for folders.</param>
        <param name="view">The view that controls the number of folders that are returned.</param>
        <summary>Obtains a list of folders by searching the subfolders of the specified folder.</summary>
        <returns>An object that represents the results of the search operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, Microsoft.Exchange.WebServices.Data.FolderView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, class Microsoft.Exchange.WebServices.Data.FolderView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindFolders(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.SearchFilter,Microsoft.Exchange.WebServices.Data.FolderView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindFoldersResults ^ FindFolders(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::SearchFilter ^ searchFilter, Microsoft::Exchange::WebServices::Data::FolderView ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindFoldersResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="searchFilter" Type="Microsoft.Exchange.WebServices.Data.SearchFilter" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.FolderView" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder to be searched for subfolders.</param>
        <param name="searchFilter">The search filter to be used for the search.</param>
        <param name="view">The view settings that control the number of folders that are returned in the search results.</param>
        <summary>Searches a folder by using a specified search filter and a specified folder view.</summary>
        <returns>The results of the search.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, Microsoft.Exchange.WebServices.Data.FolderView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindFoldersResults FindFolders(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, class Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, class Microsoft.Exchange.WebServices.Data.FolderView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindFolders(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,Microsoft.Exchange.WebServices.Data.SearchFilter,Microsoft.Exchange.WebServices.Data.FolderView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindFoldersResults ^ FindFolders(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, Microsoft::Exchange::WebServices::Data::SearchFilter ^ searchFilter, Microsoft::Exchange::WebServices::Data::FolderView ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindFoldersResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="searchFilter" Type="Microsoft.Exchange.WebServices.Data.SearchFilter" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.FolderView" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder to be searched for subfolders.</param>
        <param name="searchFilter">The search filter to be used for the search.</param>
        <param name="view">The view settings that control the number of folders that are returned in the search results.</param>
        <summary>Searches a well-known folder by using a specified search filter and a specified folder view.</summary>
        <returns>The results of the search.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderId As FolderId, view As ViewBase) As FindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items from a target folder with the specified preview page view. </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderName As WellKnownFolderName, view As ViewBase) As FindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder in which to search for items.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items from a target folder with the specified preview page view. </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.SearchFilter,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::SearchFilter ^ searchFilter, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="searchFilter" Type="Microsoft.Exchange.WebServices.Data.SearchFilter" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="searchFilter">The filter used to narrow search results.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items from a target folder filtered by item type with the specified preview page view.             </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.Grouping groupBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.Grouping groupBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderId As FolderId, view As ViewBase, groupBy As Grouping) As GroupedFindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GroupedFindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::Grouping ^ groupBy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="groupBy" Type="Microsoft.Exchange.WebServices.Data.Grouping" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <param name="groupBy">Specifies the grouping for items returned by the search query.</param>
        <summary>             Returns grouped items from a target folder with the specified preview page view. </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderId As FolderId, queryString As String, view As ViewBase) As FindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, System::String ^ queryString, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="queryString">The query used to specify the search.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items from a target folder according to the associated search query with the specified preview page view. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,Microsoft.Exchange.WebServices.Data.ViewBase)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2010.</summary>
        <returns>A collection of items. </returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, class Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,Microsoft.Exchange.WebServices.Data.SearchFilter,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, Microsoft::Exchange::WebServices::Data::SearchFilter ^ searchFilter, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="searchFilter" Type="Microsoft.Exchange.WebServices.Data.SearchFilter" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder in which to search for items.</param>
        <param name="searchFilter">The filter used to narrow search results.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items filtered by type from a target folder with the specified preview page view. </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, string queryString, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, string queryString, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,System.String,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderName As WellKnownFolderName, queryString As String, view As ViewBase) As FindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, System::String ^ queryString, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder in which to search for items.</param>
        <param name="queryString">The query used to specify the search.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items from a target folder using the associated query with the specified preview page view. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,System.String,Microsoft.Exchange.WebServices.Data.ViewBase)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2010.</summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.Grouping groupBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, class Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.Grouping groupBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.SearchFilter,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GroupedFindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, Microsoft::Exchange::WebServices::Data::SearchFilter ^ searchFilter, Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::Grouping ^ groupBy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="searchFilter" Type="Microsoft.Exchange.WebServices.Data.SearchFilter" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="groupBy" Type="Microsoft.Exchange.WebServices.Data.Grouping" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="searchFilter">The filter used to narrow search results.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <param name="groupBy">Specifies the grouping for items returned by the search query.</param>
        <summary>             Obtains a grouped list of items by searching the contents of a specific folder. </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.Grouping groupBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.Grouping groupBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderId As FolderId, queryString As String, view As ViewBase, groupBy As Grouping) As GroupedFindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GroupedFindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, System::String ^ queryString, Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::Grouping ^ groupBy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="groupBy" Type="Microsoft.Exchange.WebServices.Data.Grouping" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="queryString">The query used to specify the search.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <param name="groupBy">Specifies the grouping for items returned by the search query.</param>
        <summary>             Returns grouped items from a target folder according to the specified query.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2010.</summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, bool returnHighlightTerms, Microsoft.Exchange.WebServices.Data.ViewBase view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.FindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, bool returnHighlightTerms, class Microsoft.Exchange.WebServices.Data.ViewBase view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean,Microsoft.Exchange.WebServices.Data.ViewBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderId As FolderId, queryString As String, returnHighlightTerms As Boolean, view As ViewBase) As FindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::FindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, System::String ^ queryString, bool returnHighlightTerms, Microsoft::Exchange::WebServices::Data::ViewBase ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.FindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="returnHighlightTerms" Type="System.Boolean" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="queryString">The query used to specify the search.</param>
        <param name="returnHighlightTerms">A flag indicating whether highlighted terms should be returned in the response.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <summary>             Returns items from a target folder according to the associated search query with the specified preview page view and optional term highlighting. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean,Microsoft.Exchange.WebServices.Data.ViewBase)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.Grouping groupBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, class Microsoft.Exchange.WebServices.Data.SearchFilter searchFilter, class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.Grouping groupBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,Microsoft.Exchange.WebServices.Data.SearchFilter,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GroupedFindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, Microsoft::Exchange::WebServices::Data::SearchFilter ^ searchFilter, Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::Grouping ^ groupBy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="searchFilter" Type="Microsoft.Exchange.WebServices.Data.SearchFilter" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="groupBy" Type="Microsoft.Exchange.WebServices.Data.Grouping" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder in which to search for items.</param>
        <param name="searchFilter">The filter used to narrow search results.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <param name="groupBy">Specifies the grouping for items returned by the search query.</param>
        <summary>             Returns grouped items filtered by type from the target folder according to the specified preview page view. </summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, string queryString, Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.Grouping groupBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(valuetype Microsoft.Exchange.WebServices.Data.WellKnownFolderName parentFolderName, string queryString, class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.Grouping groupBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,System.String,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderName As WellKnownFolderName, queryString As String, view As ViewBase, groupBy As Grouping) As GroupedFindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GroupedFindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::WellKnownFolderName parentFolderName, System::String ^ queryString, Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::Grouping ^ groupBy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderName" Type="Microsoft.Exchange.WebServices.Data.WellKnownFolderName" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="groupBy" Type="Microsoft.Exchange.WebServices.Data.Grouping" />
      </Parameters>
      <Docs>
        <param name="parentFolderName">The name of the folder in which to search for items.</param>
        <param name="queryString">The query used to specify the search.</param>
        <param name="view">A value that determines the number of items per preview page.</param>
        <param name="groupBy">Specifies the grouping for items returned by the search query.</param>
        <summary>             Returns grouped items from a target folder using the associated query with the specified preview page view. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.WellKnownFolderName,System.String,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2010.</summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt; FindItems (Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, bool returnHighlightTerms, Microsoft.Exchange.WebServices.Data.ViewBase view, Microsoft.Exchange.WebServices.Data.Grouping groupBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; FindItems(class Microsoft.Exchange.WebServices.Data.FolderId parentFolderId, string queryString, bool returnHighlightTerms, class Microsoft.Exchange.WebServices.Data.ViewBase view, class Microsoft.Exchange.WebServices.Data.Grouping groupBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItems (parentFolderId As FolderId, queryString As String, returnHighlightTerms As Boolean, view As ViewBase, groupBy As Grouping) As GroupedFindItemsResults(Of Item)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GroupedFindItemsResults&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ FindItems(Microsoft::Exchange::WebServices::Data::FolderId ^ parentFolderId, System::String ^ queryString, bool returnHighlightTerms, Microsoft::Exchange::WebServices::Data::ViewBase ^ view, Microsoft::Exchange::WebServices::Data::Grouping ^ groupBy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults&lt;Microsoft.Exchange.WebServices.Data.Item&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="returnHighlightTerms" Type="System.Boolean" />
        <Parameter Name="view" Type="Microsoft.Exchange.WebServices.Data.ViewBase" />
        <Parameter Name="groupBy" Type="Microsoft.Exchange.WebServices.Data.Grouping" />
      </Parameters>
      <Docs>
        <param name="parentFolderId">The ID of the folder in which to search for items.</param>
        <param name="queryString">The query used to specify the search.</param>
        <param name="returnHighlightTerms">A flag indicating whether highlighted terms should be returned in the response.</param>
        <param name="view">The view controlling the number of items returned.</param>
        <param name="groupBy">Specifies the grouping for items returned by the search query.</param>
        <summary>             Returns grouped items from a target folder according to the associated search query, optionally with terms highlighted. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.FindItems(Microsoft.Exchange.WebServices.Data.FolderId,System.String,System.Boolean,Microsoft.Exchange.WebServices.Data.ViewBase,Microsoft.Exchange.WebServices.Data.Grouping)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppManifests">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Xml.XmlDocument&gt; GetAppManifests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class System.Xml.XmlDocument&gt; GetAppManifests() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppManifests" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppManifests () As Collection(Of XmlDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;System::Xml::XmlDocument ^&gt; ^ GetAppManifests();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Xml.XmlDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the app manifests for apps installed on the server.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppManifests" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of manifests.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppManifests">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.ClientApp&gt; GetAppManifests (string apiVersionSupported, string schemaVersionSupported);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.ClientApp&gt; GetAppManifests(string apiVersionSupported, string schemaVersionSupported) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppManifests(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppManifests (apiVersionSupported As String, schemaVersionSupported As String) As Collection(Of ClientApp)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::ClientApp ^&gt; ^ GetAppManifests(System::String ^ apiVersionSupported, System::String ^ schemaVersionSupported);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.ClientApp&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="apiVersionSupported" Type="System.String" />
        <Parameter Name="schemaVersionSupported" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="apiVersionSupported">The API version supported by the client.</param>
        <param name="schemaVersionSupported">The schema version supported by the client.</param>
        <summary>Gets the app manifests for apps installed on the server that support the specified API and schema version.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppManifests(System.String,System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with 15.00.0847.032.</summary>
        <returns>A collection of manifests</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppMarketplaceUrl">
      <MemberSignature Language="C#" Value="public string GetAppMarketplaceUrl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAppMarketplaceUrl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppMarketplaceUrl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppMarketplaceUrl () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAppMarketplaceUrl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the URL of the apps marketplace.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppMarketplaceUrl" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The apps Marketplace URL.</returns>
        <remarks>
          <para>Exception will be thrown for errors. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppMarketplaceUrl">
      <MemberSignature Language="C#" Value="public string GetAppMarketplaceUrl (string apiVersionSupported, string schemaVersionSupported);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAppMarketplaceUrl(string apiVersionSupported, string schemaVersionSupported) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppMarketplaceUrl(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppMarketplaceUrl (apiVersionSupported As String, schemaVersionSupported As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAppMarketplaceUrl(System::String ^ apiVersionSupported, System::String ^ schemaVersionSupported);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="apiVersionSupported" Type="System.String" />
        <Parameter Name="schemaVersionSupported" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="apiVersionSupported">The API version supported by the client.</param>
        <param name="schemaVersionSupported">The schema version supported by the client.</param>
        <summary>Gets the URL of the apps marketplace, based on the supported API and schema version.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAppMarketplaceUrl(System.String,System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with 15.00.0847.032.</summary>
        <returns>The apps Marketplace URL.</returns>
        <remarks>
          <para>Exception will be thrown for errors. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachments">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetAttachmentResponse&gt; GetAttachments (Microsoft.Exchange.WebServices.Data.Attachment[] attachments, Nullable&lt;Microsoft.Exchange.WebServices.Data.BodyType&gt; bodyType, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase&gt; additionalProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetAttachmentResponse&gt; GetAttachments(class Microsoft.Exchange.WebServices.Data.Attachment[] attachments, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.BodyType&gt; bodyType, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase&gt; additionalProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAttachments(Microsoft.Exchange.WebServices.Data.Attachment[],System.Nullable{Microsoft.Exchange.WebServices.Data.BodyType},System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachments (attachments As Attachment(), bodyType As Nullable(Of BodyType), additionalProperties As IEnumerable(Of PropertyDefinitionBase)) As ServiceResponseCollection(Of GetAttachmentResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetAttachmentResponse ^&gt; ^ GetAttachments(cli::array &lt;Microsoft::Exchange::WebServices::Data::Attachment ^&gt; ^ attachments, Nullable&lt;Microsoft::Exchange::WebServices::Data::BodyType&gt; bodyType, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::PropertyDefinitionBase ^&gt; ^ additionalProperties);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetAttachmentResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachments" Type="Microsoft.Exchange.WebServices.Data.Attachment[]" />
        <Parameter Name="bodyType" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.BodyType&gt;" />
        <Parameter Name="additionalProperties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase&gt;" />
      </Parameters>
      <Docs>
        <param name="attachments">An array of <see cref="T:Microsoft.Exchange.WebServices.Data.Attachment" /> objects.</param>
        <param name="bodyType">Specifies how the body text is formatted in the response.</param>
        <param name="additionalProperties">Specifies additional properties on the attachment to return in the response.</param>
        <summary>Gets attachments properties from the server.</summary>
        <returns>A collection of responses for each attachment.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachments">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetAttachmentResponse&gt; GetAttachments (string[] attachmentIds, Nullable&lt;Microsoft.Exchange.WebServices.Data.BodyType&gt; bodyType, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase&gt; additionalProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetAttachmentResponse&gt; GetAttachments(string[] attachmentIds, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.BodyType&gt; bodyType, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase&gt; additionalProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetAttachments(System.String[],System.Nullable{Microsoft.Exchange.WebServices.Data.BodyType},System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachments (attachmentIds As String(), bodyType As Nullable(Of BodyType), additionalProperties As IEnumerable(Of PropertyDefinitionBase)) As ServiceResponseCollection(Of GetAttachmentResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetAttachmentResponse ^&gt; ^ GetAttachments(cli::array &lt;System::String ^&gt; ^ attachmentIds, Nullable&lt;Microsoft::Exchange::WebServices::Data::BodyType&gt; bodyType, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::PropertyDefinitionBase ^&gt; ^ additionalProperties);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetAttachmentResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentIds" Type="System.String[]" />
        <Parameter Name="bodyType" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.BodyType&gt;" />
        <Parameter Name="additionalProperties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase&gt;" />
      </Parameters>
      <Docs>
        <param name="attachmentIds">An array of attachment IDs identifying the attachments to get from the server.</param>
        <param name="bodyType">Specifies how the body text is formatted in the response.</param>
        <param name="additionalProperties">Specifies additional properties on the attachment to return in the response.</param>
        <summary>Gets attachments properties from the server.</summary>
        <returns>A collection of responses for each attachment.</returns>
        <remarks>
          <para>This method retrieves one or more attachments based on the attachment IDs specified in the <paramref name="attachmentIds" /> parameter. This enables access to attachments when only the attachment ID is available, such as when a <a href="0f872924-ea1a-4aa2-bb7b-e12d31014612.htm">mail app sends attachment IDs to a remote service</a></para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClientAccessToken">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse&gt; GetClientAccessToken (Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest[] tokenRequests);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse&gt; GetClientAccessToken(class Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest[] tokenRequests) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetClientAccessToken(Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetClientAccessToken (tokenRequests As ClientAccessTokenRequest()) As ServiceResponseCollection(Of GetClientAccessTokenResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetClientAccessTokenResponse ^&gt; ^ GetClientAccessToken(cli::array &lt;Microsoft::Exchange::WebServices::Data::ClientAccessTokenRequest ^&gt; ^ tokenRequests);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenRequests" Type="Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest[]" />
      </Parameters>
      <Docs>
        <param name="tokenRequests">Token requests array</param>
        <summary>Gets a collection of token identifiers and types based on an array of <see cref="Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest" /> objects.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetClientAccessToken(Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with 15.00.0847.032.</summary>
        <returns>A collection of objects providing token results for each of the specified token requests.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClientAccessToken">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse&gt; GetClientAccessToken (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Exchange.WebServices.Data.ClientAccessTokenType&gt;&gt; idAndTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse&gt; GetClientAccessToken(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.Exchange.WebServices.Data.ClientAccessTokenType&gt;&gt; idAndTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetClientAccessToken(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Exchange.WebServices.Data.ClientAccessTokenType}})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetClientAccessToken (idAndTypes As IEnumerable(Of KeyValuePair(Of String, ClientAccessTokenType))) As ServiceResponseCollection(Of GetClientAccessTokenResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetClientAccessTokenResponse ^&gt; ^ GetClientAccessToken(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::Exchange::WebServices::Data::ClientAccessTokenType&gt;&gt; ^ idAndTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idAndTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Exchange.WebServices.Data.ClientAccessTokenType&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="idAndTypes">The client access token ID and token type that identifies caller identity and extension callback information.</param>
        <summary>Gets a collection of token identifiers and types based on key value pairs of token IDs and token types.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetClientAccessToken(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Exchange.WebServices.Data.ClientAccessTokenType}})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of objects providing token results for each of the specified ID and type pairs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClientExtension">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetClientExtensionResponse GetClientExtension (Microsoft.Exchange.WebServices.Data.StringList requestedExtensionIds, bool shouldReturnEnabledOnly, bool isUserScope, string userId, Microsoft.Exchange.WebServices.Data.StringList userEnabledExtensionIds, Microsoft.Exchange.WebServices.Data.StringList userDisabledExtensionIds, bool isDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetClientExtensionResponse GetClientExtension(class Microsoft.Exchange.WebServices.Data.StringList requestedExtensionIds, bool shouldReturnEnabledOnly, bool isUserScope, string userId, class Microsoft.Exchange.WebServices.Data.StringList userEnabledExtensionIds, class Microsoft.Exchange.WebServices.Data.StringList userDisabledExtensionIds, bool isDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetClientExtension(Microsoft.Exchange.WebServices.Data.StringList,System.Boolean,System.Boolean,System.String,Microsoft.Exchange.WebServices.Data.StringList,Microsoft.Exchange.WebServices.Data.StringList,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetClientExtension (requestedExtensionIds As StringList, shouldReturnEnabledOnly As Boolean, isUserScope As Boolean, userId As String, userEnabledExtensionIds As StringList, userDisabledExtensionIds As StringList, isDebug As Boolean) As GetClientExtensionResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetClientExtensionResponse ^ GetClientExtension(Microsoft::Exchange::WebServices::Data::StringList ^ requestedExtensionIds, bool shouldReturnEnabledOnly, bool isUserScope, System::String ^ userId, Microsoft::Exchange::WebServices::Data::StringList ^ userEnabledExtensionIds, Microsoft::Exchange::WebServices::Data::StringList ^ userDisabledExtensionIds, bool isDebug);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetClientExtensionResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedExtensionIds" Type="Microsoft.Exchange.WebServices.Data.StringList" />
        <Parameter Name="shouldReturnEnabledOnly" Type="System.Boolean" />
        <Parameter Name="isUserScope" Type="System.Boolean" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="userEnabledExtensionIds" Type="Microsoft.Exchange.WebServices.Data.StringList" />
        <Parameter Name="userDisabledExtensionIds" Type="Microsoft.Exchange.WebServices.Data.StringList" />
        <Parameter Name="isDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="requestedExtensionIds">A set of extension IDs.</param>
        <param name="shouldReturnEnabledOnly">
          <b>true</b> if only enabled extensions are returned; otherwise, <b>false</b>.</param>
        <param name="isUserScope">
          <b>true</b> if authentication is that of the associated user; otherwise, if authenticating with administrator access, <b>false</b>.</param>
        <param name="userId">An optional user identity that allows filtering in cases where an administrator installs an extension for specific users. </param>
        <param name="userEnabledExtensionIds">An optional list of organization extension IDs that can be enabled by users. This is used for results filtering. </param>
        <param name="userDisabledExtensionIds">Optional list of organization extension IDs that can be disabled by users. This is used for results filtering.</param>
        <param name="isDebug">
          <b>true</b> if the organization master table in the arbitration mailbox should be returned for debug purposes; otherwise, <b>false</b>.</param>
        <summary>Gets client extension information. This method is used in server-to-server calls to retrieve organization extensions for the administrator's Windows PowerShell or Exchange Unified Management Console (UMC) access and for the user's Windows PowerShell or UMC access, as well as user's activation for Outlook Web Access (OWA) or Outlook. This method is not expected to be used or called directly from a user client.       The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetClientExtension(Microsoft.Exchange.WebServices.Data.StringList,System.Boolean,System.Boolean,System.String,Microsoft.Exchange.WebServices.Data.StringList,Microsoft.Exchange.WebServices.Data.StringList,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.GetClientExtensionResponse" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConversationItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse&gt; GetConversationItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationRequest&gt; conversations, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; foldersToIgnore, Nullable&lt;Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt; sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse&gt; GetConversationItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationRequest&gt; conversations, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; foldersToIgnore, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt; sortOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetConversationItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationRequest},Microsoft.Exchange.WebServices.Data.PropertySet,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Nullable{Microsoft.Exchange.WebServices.Data.ConversationSortOrder})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetConversationItemsResponse ^&gt; ^ GetConversationItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationRequest ^&gt; ^ conversations, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ foldersToIgnore, Nullable&lt;Microsoft::Exchange::WebServices::Data::ConversationSortOrder&gt; sortOrder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationRequest&gt;" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="foldersToIgnore" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="sortOrder" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt;" />
      </Parameters>
      <Docs>
        <param name="conversations">Conversations with items to load.</param>
        <param name="propertySet">The set of additional properties to be returned in the response.</param>
        <param name="foldersToIgnore">The folders in the search hierarchy to ignore.</param>
        <param name="sortOrder">The property and item sort order direction used to sort the results.</param>
        <summary>Gets the items associated with a set of conversations. The items retrieved have the specified additional properties and are sorted according to a sort order. The items returned are limited by selectively ignoring folders in the search hierarchy.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetConversationItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationRequest},Microsoft.Exchange.WebServices.Data.PropertySet,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Nullable{Microsoft.Exchange.WebServices.Data.ConversationSortOrder})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of conversation items.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConversationItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ConversationResponse GetConversationItems (Microsoft.Exchange.WebServices.Data.ConversationId conversationId, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; foldersToIgnore, Nullable&lt;Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt; sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ConversationResponse GetConversationItems(class Microsoft.Exchange.WebServices.Data.ConversationId conversationId, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; foldersToIgnore, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt; sortOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetConversationItems(Microsoft.Exchange.WebServices.Data.ConversationId,Microsoft.Exchange.WebServices.Data.PropertySet,System.String,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Nullable{Microsoft.Exchange.WebServices.Data.ConversationSortOrder})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ConversationResponse ^ GetConversationItems(Microsoft::Exchange::WebServices::Data::ConversationId ^ conversationId, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::String ^ syncState, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ foldersToIgnore, Nullable&lt;Microsoft::Exchange::WebServices::Data::ConversationSortOrder&gt; sortOrder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ConversationResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversationId" Type="Microsoft.Exchange.WebServices.Data.ConversationId" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="syncState" Type="System.String" />
        <Parameter Name="foldersToIgnore" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="sortOrder" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt;" />
      </Parameters>
      <Docs>
        <param name="conversationId">The conversation identifier.</param>
        <param name="propertySet">The set of additional properties to be returned in the response.</param>
        <param name="syncState">The optional sync state representing the point in time to start the synchronization.</param>
        <param name="foldersToIgnore">The folders in the search hierarchy to ignore.</param>
        <param name="sortOrder">The property and item sort order direction used to sort the results.</param>
        <summary>Gets some or all items in a conversation specified by a conversation identifier. The items retrieved have the specified properties, are synchronized with the server according to information supplied by a synchronization state, and are sorted according to a sort order. The items returned may be further limited by selectively ignoring folders in the search hierarchy.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetConversationItems(Microsoft.Exchange.WebServices.Data.ConversationId,Microsoft.Exchange.WebServices.Data.PropertySet,System.String,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Nullable{Microsoft.Exchange.WebServices.Data.ConversationSortOrder})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of conversation items.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConversationItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse&gt; GetConversationItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationRequest&gt; conversations, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; foldersToIgnore, Nullable&lt;Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt; sortOrder, Nullable&lt;Microsoft.Exchange.WebServices.Data.MailboxSearchLocation&gt; mailboxScope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse&gt; GetConversationItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ConversationRequest&gt; conversations, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; foldersToIgnore, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt; sortOrder, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MailboxSearchLocation&gt; mailboxScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetConversationItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationRequest},Microsoft.Exchange.WebServices.Data.PropertySet,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Nullable{Microsoft.Exchange.WebServices.Data.ConversationSortOrder},System.Nullable{Microsoft.Exchange.WebServices.Data.MailboxSearchLocation})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::GetConversationItemsResponse ^&gt; ^ GetConversationItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ConversationRequest ^&gt; ^ conversations, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ foldersToIgnore, Nullable&lt;Microsoft::Exchange::WebServices::Data::ConversationSortOrder&gt; sortOrder, Nullable&lt;Microsoft::Exchange::WebServices::Data::MailboxSearchLocation&gt; mailboxScope);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ConversationRequest&gt;" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="foldersToIgnore" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="sortOrder" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.ConversationSortOrder&gt;" />
        <Parameter Name="mailboxScope" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MailboxSearchLocation&gt;" />
      </Parameters>
      <Docs>
        <param name="conversations">Conversations with items to load.</param>
        <param name="propertySet">The set of additional properties to be returned in the response.</param>
        <param name="foldersToIgnore">The folders in the search hierarchy to ignore.</param>
        <param name="sortOrder">The property and item sort order direction used to sort the results.</param>
        <param name="mailboxScope">The mailbox scope to reference.</param>
        <summary>             Gets items associated with a set of conversations. The items retrieved have the additional properties specified and are sorted according to a sort order. The set of items returned may be further limited by selectively ignoring folders in the search hierarchy and whether the target mailboxes are primary, archive, or both.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetConversationItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ConversationRequest},Microsoft.Exchange.WebServices.Data.PropertySet,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Nullable{Microsoft.Exchange.WebServices.Data.ConversationSortOrder},System.Nullable{Microsoft.Exchange.WebServices.Data.MailboxSearchLocation})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of conversation items.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDelegates">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.DelegateInformation GetDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, bool includePermissions, params Microsoft.Exchange.WebServices.Data.UserId[] userIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.DelegateInformation GetDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, bool includePermissions, class Microsoft.Exchange.WebServices.Data.UserId[] userIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Boolean,Microsoft.Exchange.WebServices.Data.UserId[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::DelegateInformation ^ GetDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, bool includePermissions, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::UserId ^&gt; ^ userIds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.DelegateInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="includePermissions" Type="System.Boolean" />
        <Parameter Name="userIds" Type="Microsoft.Exchange.WebServices.Data.UserId[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox from which delegates are to be retrieved.</param>
        <param name="includePermissions">
          <b>true</b> to return detailed permissions for each delegate, otherwise, <b>false</b>.</param>
        <param name="userIds">The optional IDs of the delegates to be retrieved from the specified mailbox.</param>
        <summary>Retrieves the delegates from a specified mailbox. </summary>
        <returns>A list of delegates for the specified mailbox.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDelegates">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.DelegateInformation GetDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, bool includePermissions, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.UserId&gt; userIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.DelegateInformation GetDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, bool includePermissions, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.UserId&gt; userIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.UserId})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::DelegateInformation ^ GetDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, bool includePermissions, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::UserId ^&gt; ^ userIds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.DelegateInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="includePermissions" Type="System.Boolean" />
        <Parameter Name="userIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.UserId&gt;" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox from which delegates are to be retrieved.</param>
        <param name="includePermissions">
          <b>true</b> to return detailed permissions for each delegate; otherwise, <b>false</b>.</param>
        <param name="userIds">The optional IDs of the delegates to be retrieved from the specified mailbox.</param>
        <summary>Retrieves the delegates from a specified mailbox. </summary>
        <returns>The delegates for the specified mailbox.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscoverySearchConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetDiscoverySearchConfigurationResponse GetDiscoverySearchConfiguration (string searchId, bool expandGroupMembership, bool inPlaceHoldConfigurationOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetDiscoverySearchConfigurationResponse GetDiscoverySearchConfiguration(string searchId, bool expandGroupMembership, bool inPlaceHoldConfigurationOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetDiscoverySearchConfiguration(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDiscoverySearchConfiguration (searchId As String, expandGroupMembership As Boolean, inPlaceHoldConfigurationOnly As Boolean) As GetDiscoverySearchConfigurationResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetDiscoverySearchConfigurationResponse ^ GetDiscoverySearchConfiguration(System::String ^ searchId, bool expandGroupMembership, bool inPlaceHoldConfigurationOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetDiscoverySearchConfigurationResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchId" Type="System.String" />
        <Parameter Name="expandGroupMembership" Type="System.Boolean" />
        <Parameter Name="inPlaceHoldConfigurationOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="searchId">The search ID.</param>
        <param name="expandGroupMembership">
          <b>true</b> if group membership expansion is requested; otherwise, <b>false</b>.</param>
        <param name="inPlaceHoldConfigurationOnly">
          <b>true</b> if only in-place hold configuration information is requested; otherwise, <b>false</b>.</param>
        <summary>Gets search configuration information for the purpose of eDiscovery.   The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetDiscoverySearchConfiguration(System.String,System.Boolean,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>eDiscovery search configuration data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncryptionConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetEncryptionConfigurationResponse GetEncryptionConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetEncryptionConfigurationResponse GetEncryptionConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetEncryptionConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEncryptionConfiguration () As GetEncryptionConfigurationResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetEncryptionConfigurationResponse ^ GetEncryptionConfiguration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetEncryptionConfigurationResponse</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For internal use only.</summary>
        <returns>Encryption Configuration response object</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHoldOnMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetHoldOnMailboxesResponse GetHoldOnMailboxes (string holdId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetHoldOnMailboxesResponse GetHoldOnMailboxes(string holdId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetHoldOnMailboxes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHoldOnMailboxes (holdId As String) As GetHoldOnMailboxesResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetHoldOnMailboxesResponse ^ GetHoldOnMailboxes(System::String ^ holdId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetHoldOnMailboxesResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holdId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="holdId">The eDiscovery hold ID.</param>
        <summary>             Gets information about an eDiscovery hold on mailboxes.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetHoldOnMailboxes(System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The results of a query-based hold.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInboxRules">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.RuleCollection GetInboxRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.RuleCollection GetInboxRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetInboxRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInboxRules () As RuleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::RuleCollection ^ GetInboxRules();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.RuleCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a collection of Inbox rules that are associated with the specified user.</summary>
        <returns>A collection of the specified user's Inbox rules.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInboxRules">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.RuleCollection GetInboxRules (string mailboxSmtpAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.RuleCollection GetInboxRules(string mailboxSmtpAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetInboxRules(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInboxRules (mailboxSmtpAddress As String) As RuleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::RuleCollection ^ GetInboxRules(System::String ^ mailboxSmtpAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.RuleCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxSmtpAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mailboxSmtpAddress">The SMTP address of the user whose Inbox rules are to be retrieved.</param>
        <summary>Retrieves a collection of Inbox rules that are associated with a specified user.</summary>
        <returns>A collection of the specified user's Inbox rules.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS). </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonIndexableItemDetails">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse GetNonIndexableItemDetails (Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse GetNonIndexableItemDetails(class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemDetails(Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonIndexableItemDetails (parameters As GetNonIndexableItemDetailsParameters) As GetNonIndexableItemDetailsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemDetailsResponse ^ GetNonIndexableItemDetails(Microsoft::Exchange::WebServices::Data::GetNonIndexableItemDetailsParameters ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">An object containing parameter values. </param>
        <summary>Gets information about items in the target mailboxes that could not be indexed using the associated <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters" /> object.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemDetails(Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>An object containing information about items that could not be indexed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonIndexableItemDetails">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse GetNonIndexableItemDetails (string[] mailboxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse GetNonIndexableItemDetails(string[] mailboxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemDetails(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonIndexableItemDetails (mailboxes As String()) As GetNonIndexableItemDetailsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemDetailsResponse ^ GetNonIndexableItemDetails(cli::array &lt;System::String ^&gt; ^ mailboxes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="mailboxes">The list of mailboxes.</param>
        <summary>             Gets information about items in the target mailboxes that could not be indexed.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemDetails(System.String[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The results of a query-based hold.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonIndexableItemDetails">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse GetNonIndexableItemDetails (string[] mailboxes, Nullable&lt;int&gt; pageSize, string pageItemReference, Nullable&lt;Microsoft.Exchange.WebServices.Data.SearchPageDirection&gt; pageDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse GetNonIndexableItemDetails(string[] mailboxes, valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageItemReference, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.SearchPageDirection&gt; pageDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemDetails(System.String[],System.Nullable{System.Int32},System.String,System.Nullable{Microsoft.Exchange.WebServices.Data.SearchPageDirection})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonIndexableItemDetails (mailboxes As String(), pageSize As Nullable(Of Integer), pageItemReference As String, pageDirection As Nullable(Of SearchPageDirection)) As GetNonIndexableItemDetailsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemDetailsResponse ^ GetNonIndexableItemDetails(cli::array &lt;System::String ^&gt; ^ mailboxes, Nullable&lt;int&gt; pageSize, System::String ^ pageItemReference, Nullable&lt;Microsoft::Exchange::WebServices::Data::SearchPageDirection&gt; pageDirection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxes" Type="System.String[]" />
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="pageItemReference" Type="System.String" />
        <Parameter Name="pageDirection" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.SearchPageDirection&gt;" />
      </Parameters>
      <Docs>
        <param name="mailboxes">An array of mailbox Exchange legacy distinguished names (DNs).</param>
        <param name="pageSize">The size of the page view.</param>
        <param name="pageItemReference">Reference identifier for the page view.</param>
        <param name="pageDirection">The search direction for the page view (forward or back).</param>
        <summary>             Gets information about items in the target mailboxes that could not be indexed, including the size of the page view, the reference identifier of the page view, and the search direction for the page view (forward or back).             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemDetails(System.String[],System.Nullable{System.Int32},System.String,System.Nullable{Microsoft.Exchange.WebServices.Data.SearchPageDirection})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonIndexableItemStatistics">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse GetNonIndexableItemStatistics (Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse GetNonIndexableItemStatistics(class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemStatistics(Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonIndexableItemStatistics (parameters As GetNonIndexableItemStatisticsParameters) As GetNonIndexableItemStatisticsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemStatisticsResponse ^ GetNonIndexableItemStatistics(Microsoft::Exchange::WebServices::Data::GetNonIndexableItemStatisticsParameters ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">A <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters" /> object.</param>
        <summary>            Gets statistical information about items in the target mailboxes that could not be indexed using the associated <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters" /> object.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemStatistics(Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonIndexableItemStatistics">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse GetNonIndexableItemStatistics (string[] mailboxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse GetNonIndexableItemStatistics(string[] mailboxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemStatistics(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonIndexableItemStatistics (mailboxes As String()) As GetNonIndexableItemStatisticsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetNonIndexableItemStatisticsResponse ^ GetNonIndexableItemStatistics(cli::array &lt;System::String ^&gt; ^ mailboxes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="mailboxes">A list of target mailboxes.</param>
        <summary>             Gets statistical information about items in the target mailboxes that could not be indexed.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetNonIndexableItemStatistics(System.String[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPasswordExpirationDate">
      <MemberSignature Language="C#" Value="public Nullable&lt;DateTime&gt; GetPasswordExpirationDate (string mailboxSmtpAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; GetPasswordExpirationDate(string mailboxSmtpAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetPasswordExpirationDate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPasswordExpirationDate (mailboxSmtpAddress As String) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;DateTime&gt; GetPasswordExpirationDate(System::String ^ mailboxSmtpAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxSmtpAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mailboxSmtpAddress">The SMTP address of the specified mailbox.</param>
        <summary>Gets the domain password expiration date for a specified mailbox user. This method was introduced in Exchange Server 2010 SP2 and the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A DateTime object.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoomLists">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.EmailAddressCollection GetRoomLists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.EmailAddressCollection GetRoomLists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetRoomLists" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRoomLists () As EmailAddressCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::EmailAddressCollection ^ GetRoomLists();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.EmailAddressCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a collection of all room lists in a specified organization.</summary>
        <returns>All the room lists in the organization.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRooms">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.EmailAddress&gt; GetRooms (Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.EmailAddress&gt; GetRooms(class Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetRooms(Microsoft.Exchange.WebServices.Data.EmailAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::EmailAddress ^&gt; ^ GetRooms(Microsoft::Exchange::WebServices::Data::EmailAddress ^ emailAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.EmailAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailAddress" Type="Microsoft.Exchange.WebServices.Data.EmailAddress" />
      </Parameters>
      <Docs>
        <param name="emailAddress">The email address of the room list.</param>
        <summary>Retrieves a collection of all rooms in a specified room list in an organization.</summary>
        <returns>All the rooms included in the specified room list.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSearchableMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetSearchableMailboxesResponse GetSearchableMailboxes (string searchFilter, bool expandGroupMembership);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetSearchableMailboxesResponse GetSearchableMailboxes(string searchFilter, bool expandGroupMembership) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetSearchableMailboxes(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSearchableMailboxes (searchFilter As String, expandGroupMembership As Boolean) As GetSearchableMailboxesResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetSearchableMailboxesResponse ^ GetSearchableMailboxes(System::String ^ searchFilter, bool expandGroupMembership);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetSearchableMailboxesResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchFilter" Type="System.String" />
        <Parameter Name="expandGroupMembership" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="searchFilter">A value used to refine a search such as an email address or a display name.</param>
        <param name="expandGroupMembership">
          <b>true</b> to expand group membership; otherwise, <b>false</b>.</param>
        <summary>      Gets two lists of mailboxes: a list of mailboxes that could be searched and a list of mailboxes that could not be searched for the purpose of eDiscovery.       The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetSearchableMailboxes(System.String,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of mailboxes that could be searched and a collection of mailboxes that could not be searched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserAvailability">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults GetUserAvailability (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.AttendeeInfo&gt; attendees, Microsoft.Exchange.WebServices.Data.TimeWindow timeWindow, Microsoft.Exchange.WebServices.Data.AvailabilityData requestedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults GetUserAvailability(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.AttendeeInfo&gt; attendees, class Microsoft.Exchange.WebServices.Data.TimeWindow timeWindow, valuetype Microsoft.Exchange.WebServices.Data.AvailabilityData requestedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserAvailability(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.AttendeeInfo},Microsoft.Exchange.WebServices.Data.TimeWindow,Microsoft.Exchange.WebServices.Data.AvailabilityData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetUserAvailabilityResults ^ GetUserAvailability(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::AttendeeInfo ^&gt; ^ attendees, Microsoft::Exchange::WebServices::Data::TimeWindow ^ timeWindow, Microsoft::Exchange::WebServices::Data::AvailabilityData requestedData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attendees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.AttendeeInfo&gt;" />
        <Parameter Name="timeWindow" Type="Microsoft.Exchange.WebServices.Data.TimeWindow" />
        <Parameter Name="requestedData" Type="Microsoft.Exchange.WebServices.Data.AvailabilityData" />
      </Parameters>
      <Docs>
        <param name="attendees">The attendees for which availability information is to be retrieved.</param>
        <param name="timeWindow">The time period during which user availability information is to be retrieved.</param>
        <param name="requestedData">The requested free/busy or suggestion data.</param>
        <summary>Retrieves detailed information about the availability of a set of users, rooms, and resources during a specified time period.</summary>
        <returns>Detailed information about the availability of the specified users, rooms, and resources.</returns>
        <remarks>
          <para>The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserAvailability(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.AttendeeInfo},Microsoft.Exchange.WebServices.Data.TimeWindow,Microsoft.Exchange.WebServices.Data.AvailabilityData)" /> method supports only time periods that are a minimum of 24 hours long and that begin and end at 12:00a.m. To restrict the results of the method to a shorter time period, you must filter the results on the client.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserAvailability">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults GetUserAvailability (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.AttendeeInfo&gt; attendees, Microsoft.Exchange.WebServices.Data.TimeWindow timeWindow, Microsoft.Exchange.WebServices.Data.AvailabilityData requestedData, Microsoft.Exchange.WebServices.Data.AvailabilityOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults GetUserAvailability(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.AttendeeInfo&gt; attendees, class Microsoft.Exchange.WebServices.Data.TimeWindow timeWindow, valuetype Microsoft.Exchange.WebServices.Data.AvailabilityData requestedData, class Microsoft.Exchange.WebServices.Data.AvailabilityOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserAvailability(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.AttendeeInfo},Microsoft.Exchange.WebServices.Data.TimeWindow,Microsoft.Exchange.WebServices.Data.AvailabilityData,Microsoft.Exchange.WebServices.Data.AvailabilityOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetUserAvailabilityResults ^ GetUserAvailability(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::AttendeeInfo ^&gt; ^ attendees, Microsoft::Exchange::WebServices::Data::TimeWindow ^ timeWindow, Microsoft::Exchange::WebServices::Data::AvailabilityData requestedData, Microsoft::Exchange::WebServices::Data::AvailabilityOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attendees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.AttendeeInfo&gt;" />
        <Parameter Name="timeWindow" Type="Microsoft.Exchange.WebServices.Data.TimeWindow" />
        <Parameter Name="requestedData" Type="Microsoft.Exchange.WebServices.Data.AvailabilityData" />
        <Parameter Name="options" Type="Microsoft.Exchange.WebServices.Data.AvailabilityOptions" />
      </Parameters>
      <Docs>
        <param name="attendees">The attendees for which availability information is to be retrieved.</param>
        <param name="timeWindow">The time period during which user availability information is to be retrieved.</param>
        <param name="requestedData">The requested free/busy or suggestion data.</param>
        <param name="options">The options that control the information that is returned.</param>
        <summary>Retrieves detailed information about the availability of a set of users, rooms, and resources within a specified time period.</summary>
        <returns>Detailed information about the availability of the specified users, rooms, and resources.</returns>
        <remarks>
          <para>The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserAvailability(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.AttendeeInfo},Microsoft.Exchange.WebServices.Data.TimeWindow,Microsoft.Exchange.WebServices.Data.AvailabilityData,Microsoft.Exchange.WebServices.Data.AvailabilityOptions)" /> method supports only time periods that are a minimum of 24 hours long and that begin and end at 12:00a.m. To restrict the results of the method to a shorter time period, you must filter the results on the client.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserOofSettings">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.OofSettings GetUserOofSettings (string smtpAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.OofSettings GetUserOofSettings(string smtpAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserOofSettings(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUserOofSettings (smtpAddress As String) As OofSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::OofSettings ^ GetUserOofSettings(System::String ^ smtpAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.OofSettings</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smtpAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="smtpAddress">The SMTP address of the user for whom OOF settings are to be retrieved.</param>
        <summary>Gets Out of Office (OOF) settings for a specified mailbox.</summary>
        <returns>The OOF settings for the specified mailbox.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserRetentionPolicyTags">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.GetUserRetentionPolicyTagsResponse GetUserRetentionPolicyTags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.GetUserRetentionPolicyTagsResponse GetUserRetentionPolicyTags() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserRetentionPolicyTags" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUserRetentionPolicyTags () As GetUserRetentionPolicyTagsResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::GetUserRetentionPolicyTagsResponse ^ GetUserRetentionPolicyTags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.GetUserRetentionPolicyTagsResponse</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>             Gets user retention policy tags.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.GetUserRetentionPolicyTags" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A user's retention policy tags.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonatedUserId">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ImpersonatedUserId ImpersonatedUserId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Exchange.WebServices.Data.ImpersonatedUserId ImpersonatedUserId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.ImpersonatedUserId" />
      <MemberSignature Language="VB.NET" Value="Public Property ImpersonatedUserId As ImpersonatedUserId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Exchange::WebServices::Data::ImpersonatedUserId ^ ImpersonatedUserId { Microsoft::Exchange::WebServices::Data::ImpersonatedUserId ^ get(); void set(Microsoft::Exchange::WebServices::Data::ImpersonatedUserId ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ImpersonatedUserId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID of the user who Exchange Web Services (EWS) is to impersonate.</summary>
        <value>The ID of the user who EWS is to impersonate.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstallApp">
      <MemberSignature Language="C#" Value="public void InstallApp (System.IO.Stream manifestStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InstallApp(class System.IO.Stream manifestStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.InstallApp(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InstallApp (manifestStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InstallApp(System::IO::Stream ^ manifestStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifestStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="manifestStream">The application manifest's plain text XML stream. </param>
        <summary>             Installs a mail app.              The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.InstallApp(System.IO.Stream)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <remarks>
          <para>An exception will be thrown for errors. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPropertiesForItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; LoadPropertiesForItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt; items, Microsoft.Exchange.WebServices.Data.PropertySet propertySet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; LoadPropertiesForItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; items, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.LoadPropertiesForItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.PropertySet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ LoadPropertiesForItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ items, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt;" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
      </Parameters>
      <Docs>
        <param name="items">The items whose properties are to be loaded.</param>
        <param name="propertySet">The set of properties to be loaded.</param>
        <summary>Loads the properties of multiple items in a single call to Exchange Web Services (EWS).</summary>
        <returns>A collection of results for each of the specified items.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManagementRoles">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ManagementRoles ManagementRoles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Exchange.WebServices.Data.ManagementRoles ManagementRoles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.ManagementRoles" />
      <MemberSignature Language="VB.NET" Value="Public Property ManagementRoles As ManagementRoles" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Exchange::WebServices::Data::ManagementRoles ^ ManagementRoles { Microsoft::Exchange::WebServices::Data::ManagementRoles ^ get(); void set(Microsoft::Exchange::WebServices::Data::ManagementRoles ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ManagementRoles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user and application roles used to restrict access based on group membership.The <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeService.ManagementRoles" /> property is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <value>The management roles.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsJunk">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MarkAsJunkResponse&gt; MarkAsJunk (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, bool isJunk, bool moveItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.MarkAsJunkResponse&gt; MarkAsJunk(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, bool isJunk, bool moveItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.MarkAsJunk(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarkAsJunk (itemIds As IEnumerable(Of ItemId), isJunk As Boolean, moveItem As Boolean) As ServiceResponseCollection(Of MarkAsJunkResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::MarkAsJunkResponse ^&gt; ^ MarkAsJunk(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, bool isJunk, bool moveItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MarkAsJunkResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="isJunk" Type="System.Boolean" />
        <Parameter Name="moveItem" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="itemIds">IDs for the mailbox items to mark.</param>
        <param name="isJunk">
          <b>true</b> if the items are junk (in which case, senders are added to the blocked senders list); otherwise, <b>false</b> (in which case, senders are not added to the blocked senders list).</param>
        <param name="moveItem">
          <b>true</b> to move the item to the junk folder; otherwise, <b>false</b>. </param>
        <summary>             Marks mailbox items as junk.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.MarkAsJunk(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},System.Boolean,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of item IDs for each of the moved items.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; MoveItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; MoveItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.MoveItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveItems (itemIds As IEnumerable(Of ItemId), destinationFolderId As FolderId) As ServiceResponseCollection(Of MoveCopyItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::MoveCopyItemResponse ^&gt; ^ MoveItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be moved</param>
        <param name="destinationFolderId">The ID of the folder to which the specified items are to be moved.</param>
        <summary>Moves multiple items in a single call to Exchange Web Services (EWS).</summary>
        <returns>A collection of copy results for each of the specified items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; MoveItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId, bool returnNewItemIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt; MoveItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; itemIds, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId, bool returnNewItemIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.MoveItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveItems (itemIds As IEnumerable(Of ItemId), destinationFolderId As FolderId, returnNewItemIds As Boolean) As ServiceResponseCollection(Of MoveCopyItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::MoveCopyItemResponse ^&gt; ^ MoveItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ itemIds, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId, bool returnNewItemIds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="returnNewItemIds" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="itemIds">The IDs of the items to be moved.</param>
        <param name="destinationFolderId">The ID of the folder to which the specified items are to be moved.</param>
        <param name="returnNewItemIds">
          <b>true</b> to return new item identifiers for the moved items; otherwise, <b>false</b> to return the original item identifiers.</param>
        <summary> Moves multiple items in a single call to Exchange Web Services (EWS).This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A collection of copy results for each of the specified items.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; MoveItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; MoveItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, class Microsoft.Exchange.WebServices.Data.FolderId destinationFolderId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.MoveItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.FolderId)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveItemsInConversations (idLastSyncTimePairs As IEnumerable(Of KeyValuePair(Of ConversationId, Nullable(Of DateTime))), contextFolderId As FolderId, destinationFolderId As FolderId) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ MoveItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, Microsoft::Exchange::WebServices::Data::FolderId ^ destinationFolderId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="destinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">The identifier of the conversation whose items are to be moved, and the date and time that the conversation was last synchronized. Items that were received after that date will not be moved.</param>
        <param name="contextFolderId">The folder identifier of the folder that contains the specified conversation.</param>
        <param name="destinationFolderId">The destination folder identifier.</param>
        <summary>Moves items from a specified conversation to a specified destination folder.</summary>
        <returns>A collection of responses.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo PreferredCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo PreferredCulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.PreferredCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property PreferredCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ PreferredCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the preferred culture for messages that are returned by Exchange Web Services (EWS).</summary>
        <value>The preferred culture for messages.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDelegates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; RemoveDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, params Microsoft.Exchange.WebServices.Data.UserId[] userIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; RemoveDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, class Microsoft.Exchange.WebServices.Data.UserId[] userIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.RemoveDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,Microsoft.Exchange.WebServices.Data.UserId[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::DelegateUserResponse ^&gt; ^ RemoveDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::UserId ^&gt; ^ userIds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="userIds" Type="Microsoft.Exchange.WebServices.Data.UserId[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox from which the delegates are to be removed.</param>
        <param name="userIds">The IDs of the delegates to be removed from the specified mailbox.</param>
        <summary>Removes delegates from a specified mailbox. Calling this method results in a call to Exchange Web Services (EWS).</summary>
        <returns>A collection of objects that provides the results of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDelegates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; RemoveDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.UserId&gt; userIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; RemoveDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.UserId&gt; userIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.RemoveDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.UserId})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::DelegateUserResponse ^&gt; ^ RemoveDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::UserId ^&gt; ^ userIds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="userIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.UserId&gt;" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox from which delegates are to be removed.</param>
        <param name="userIds">The IDs of the delegates to be removed from the specified mailbox.</param>
        <summary>Removes delegates from a specific mailbox. </summary>
        <returns>A collection of objects that provides the results of the operation.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveName">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName (string nameToResolve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName(string nameToResolve) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ResolveName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveName (nameToResolve As String) As NameResolutionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::NameResolutionCollection ^ ResolveName(System::String ^ nameToResolve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.NameResolutionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameToResolve" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nameToResolve">The name to be resolved.</param>
        <summary>Finds contacts in the user's Contacts folder and the Global Address List (GAL) — in that order — that have names matching the name that was passed as a parameter. </summary>
        <returns>A collection of name resolutions whose names match the one that was passed as a parameter.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveName">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName (string nameToResolve, Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName(string nameToResolve, valuetype Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ResolveName(System.String,Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveName (nameToResolve As String, searchScope As ResolveNameSearchLocation, returnContactDetails As Boolean) As NameResolutionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::NameResolutionCollection ^ ResolveName(System::String ^ nameToResolve, Microsoft::Exchange::WebServices::Data::ResolveNameSearchLocation searchScope, bool returnContactDetails);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.NameResolutionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameToResolve" Type="System.String" />
        <Parameter Name="searchScope" Type="Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation" />
        <Parameter Name="returnContactDetails" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nameToResolve">The name to be resolved.</param>
        <param name="searchScope">The scope of the search.</param>
        <param name="returnContactDetails">
          <b>true</b> to return full contact information for each of the contacts found in the search; otherwise, <b>false</b>.</param>
        <summary>Finds contacts in the default contacts folder and/or the Global Address List (GAL) that have names matching the name that was passed as a parameter. </summary>
        <returns>A collection of name resolutions whose names match the one that was passed as a parameter.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveName">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName (string nameToResolve, Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails, Microsoft.Exchange.WebServices.Data.PropertySet contactDataPropertySet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName(string nameToResolve, valuetype Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails, class Microsoft.Exchange.WebServices.Data.PropertySet contactDataPropertySet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ResolveName(System.String,Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation,System.Boolean,Microsoft.Exchange.WebServices.Data.PropertySet)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveName (nameToResolve As String, searchScope As ResolveNameSearchLocation, returnContactDetails As Boolean, contactDataPropertySet As PropertySet) As NameResolutionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::NameResolutionCollection ^ ResolveName(System::String ^ nameToResolve, Microsoft::Exchange::WebServices::Data::ResolveNameSearchLocation searchScope, bool returnContactDetails, Microsoft::Exchange::WebServices::Data::PropertySet ^ contactDataPropertySet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.NameResolutionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameToResolve" Type="System.String" />
        <Parameter Name="searchScope" Type="Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation" />
        <Parameter Name="returnContactDetails" Type="System.Boolean" />
        <Parameter Name="contactDataPropertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
      </Parameters>
      <Docs>
        <param name="nameToResolve">The name to be resolved.</param>
        <param name="searchScope">The scope of the search.</param>
        <param name="returnContactDetails">
          <b>true</b> if full contact information is to be returned for each of the found contacts; otherwise, <b>false</b>.</param>
        <param name="contactDataPropertySet">The property set for the contact details.</param>
        <summary>Finds contacts in the Global Address List (GAL) whose names match the specified name.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A collection of name resolutions whose names match the specified name.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveName">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName (string nameToResolve, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; parentFolderIds, Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName(string nameToResolve, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; parentFolderIds, valuetype Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ResolveName(System.String,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveName (nameToResolve As String, parentFolderIds As IEnumerable(Of FolderId), searchScope As ResolveNameSearchLocation, returnContactDetails As Boolean) As NameResolutionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::NameResolutionCollection ^ ResolveName(System::String ^ nameToResolve, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ parentFolderIds, Microsoft::Exchange::WebServices::Data::ResolveNameSearchLocation searchScope, bool returnContactDetails);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.NameResolutionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameToResolve" Type="System.String" />
        <Parameter Name="parentFolderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="searchScope" Type="Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation" />
        <Parameter Name="returnContactDetails" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nameToResolve">The name to be resolved.</param>
        <param name="parentFolderIds">The IDs of the contact folders to be searched for matching contacts.</param>
        <param name="searchScope">The scope of the search.</param>
        <param name="returnContactDetails">
          <b>true</b> to return for each of the contacts found in the search; otherwise, <b>false</b>.</param>
        <summary>Finds contacts in specified contact folders and/or the Global Address List (GAL) that have names matching the name that was passed as a parameter. </summary>
        <returns>A collection of name resolutions whose names match the one that was passed as a parameter.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveName">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName (string nameToResolve, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; parentFolderIds, Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails, Microsoft.Exchange.WebServices.Data.PropertySet contactDataPropertySet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.NameResolutionCollection ResolveName(string nameToResolve, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; parentFolderIds, valuetype Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation searchScope, bool returnContactDetails, class Microsoft.Exchange.WebServices.Data.PropertySet contactDataPropertySet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.ResolveName(System.String,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation,System.Boolean,Microsoft.Exchange.WebServices.Data.PropertySet)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveName (nameToResolve As String, parentFolderIds As IEnumerable(Of FolderId), searchScope As ResolveNameSearchLocation, returnContactDetails As Boolean, contactDataPropertySet As PropertySet) As NameResolutionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::NameResolutionCollection ^ ResolveName(System::String ^ nameToResolve, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ parentFolderIds, Microsoft::Exchange::WebServices::Data::ResolveNameSearchLocation searchScope, bool returnContactDetails, Microsoft::Exchange::WebServices::Data::PropertySet ^ contactDataPropertySet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.NameResolutionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameToResolve" Type="System.String" />
        <Parameter Name="parentFolderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="searchScope" Type="Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation" />
        <Parameter Name="returnContactDetails" Type="System.Boolean" />
        <Parameter Name="contactDataPropertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
      </Parameters>
      <Docs>
        <param name="nameToResolve">The name to be resolved.</param>
        <param name="parentFolderIds">The IDs of the contact folders to be searched for matching contacts.</param>
        <param name="searchScope">The scope of the search.</param>
        <param name="returnContactDetails">
          <b>true</b> if full contact information is to be returned for each of the found contacts; otherwise, <b>false</b>.</param>
        <param name="contactDataPropertySet">The property set for the contact details.</param>
        <summary>Finds contacts in the Global Address List (GAL) and/or in specific contact folders whose names match the specified name.This method was introduced in the Exchange Web Services (EWS) Managed API 1.2.</summary>
        <returns>A collection of name resolutions whose names match the specified name.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; SearchMailboxes (Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters searchParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; SearchMailboxes(class Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters searchParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SearchMailboxes(Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchMailboxes (searchParameters As SearchMailboxesParameters) As ServiceResponseCollection(Of SearchMailboxesResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::SearchMailboxesResponse ^&gt; ^ SearchMailboxes(Microsoft::Exchange::WebServices::Data::SearchMailboxesParameters ^ searchParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchParameters" Type="Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters" />
      </Parameters>
      <Docs>
        <param name="searchParameters">A set of search parameters.</param>
        <summary>             Searches mailboxes for items that match a query string using the associated <see cref="T:Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters" /> object to specify details of the search request.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SearchMailboxes(Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A set of items that match a search query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; SearchMailboxes (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.MailboxQuery&gt; mailboxQueries, Microsoft.Exchange.WebServices.Data.SearchResultType resultType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; SearchMailboxes(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.MailboxQuery&gt; mailboxQueries, valuetype Microsoft.Exchange.WebServices.Data.SearchResultType resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SearchMailboxes(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.MailboxQuery},Microsoft.Exchange.WebServices.Data.SearchResultType)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchMailboxes (mailboxQueries As IEnumerable(Of MailboxQuery), resultType As SearchResultType) As ServiceResponseCollection(Of SearchMailboxesResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::SearchMailboxesResponse ^&gt; ^ SearchMailboxes(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::MailboxQuery ^&gt; ^ mailboxQueries, Microsoft::Exchange::WebServices::Data::SearchResultType resultType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxQueries" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.MailboxQuery&gt;" />
        <Parameter Name="resultType" Type="Microsoft.Exchange.WebServices.Data.SearchResultType" />
      </Parameters>
      <Docs>
        <param name="mailboxQueries">A collection of queries and a collection of mailbox search scopes.</param>
        <param name="resultType">The search result is either statistical or an item preview.</param>
        <summary>             Searches mailboxes for items that match a set of query strings. The search result can be either statistical or an item preview.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SearchMailboxes(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.MailboxQuery},Microsoft.Exchange.WebServices.Data.SearchResultType)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of statistics or an item preview resulting from a search query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; SearchMailboxes (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.MailboxQuery&gt; mailboxQueries, Microsoft.Exchange.WebServices.Data.SearchResultType resultType, string sortByProperty, Microsoft.Exchange.WebServices.Data.SortDirection sortOrder, int pageSize, Microsoft.Exchange.WebServices.Data.SearchPageDirection pageDirection, string pageItemReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt; SearchMailboxes(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.MailboxQuery&gt; mailboxQueries, valuetype Microsoft.Exchange.WebServices.Data.SearchResultType resultType, string sortByProperty, valuetype Microsoft.Exchange.WebServices.Data.SortDirection sortOrder, int32 pageSize, valuetype Microsoft.Exchange.WebServices.Data.SearchPageDirection pageDirection, string pageItemReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SearchMailboxes(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.MailboxQuery},Microsoft.Exchange.WebServices.Data.SearchResultType,System.String,Microsoft.Exchange.WebServices.Data.SortDirection,System.Int32,Microsoft.Exchange.WebServices.Data.SearchPageDirection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchMailboxes (mailboxQueries As IEnumerable(Of MailboxQuery), resultType As SearchResultType, sortByProperty As String, sortOrder As SortDirection, pageSize As Integer, pageDirection As SearchPageDirection, pageItemReference As String) As ServiceResponseCollection(Of SearchMailboxesResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::SearchMailboxesResponse ^&gt; ^ SearchMailboxes(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::MailboxQuery ^&gt; ^ mailboxQueries, Microsoft::Exchange::WebServices::Data::SearchResultType resultType, System::String ^ sortByProperty, Microsoft::Exchange::WebServices::Data::SortDirection sortOrder, int pageSize, Microsoft::Exchange::WebServices::Data::SearchPageDirection pageDirection, System::String ^ pageItemReference);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxQueries" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.MailboxQuery&gt;" />
        <Parameter Name="resultType" Type="Microsoft.Exchange.WebServices.Data.SearchResultType" />
        <Parameter Name="sortByProperty" Type="System.String" />
        <Parameter Name="sortOrder" Type="Microsoft.Exchange.WebServices.Data.SortDirection" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="pageDirection" Type="Microsoft.Exchange.WebServices.Data.SearchPageDirection" />
        <Parameter Name="pageItemReference" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mailboxQueries">A collection of queries and a collection of mailbox search scopes.</param>
        <param name="resultType">The search result is either statistical or an item preview.</param>
        <param name="sortByProperty">The search result is sorted by property name.</param>
        <param name="sortOrder">The sort order.</param>
        <param name="pageSize">The preview page size.</param>
        <param name="pageDirection">The preview page direction, either previous or next.</param>
        <param name="pageItemReference">A reference that determines where an item is on a preview page.</param>
        <summary>             Searches mailboxes for items that match a set of query strings and returns a sorted, ordered result of preview items.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SearchMailboxes(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.MailboxQuery},Microsoft.Exchange.WebServices.Data.SearchResultType,System.String,Microsoft.Exchange.WebServices.Data.SortDirection,System.Int32,Microsoft.Exchange.WebServices.Data.SearchPageDirection,System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>An item preview of items returned in the search.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClientExtension">
      <MemberSignature Language="C#" Value="public void SetClientExtension (System.Collections.Generic.List&lt;Microsoft.Exchange.WebServices.Data.SetClientExtensionAction&gt; actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClientExtension(class System.Collections.Generic.List`1&lt;class Microsoft.Exchange.WebServices.Data.SetClientExtensionAction&gt; actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetClientExtension(System.Collections.Generic.List{Microsoft.Exchange.WebServices.Data.SetClientExtensionAction})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClientExtension (actions As List(Of SetClientExtensionAction))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClientExtension(System::Collections::Generic::List&lt;Microsoft::Exchange::WebServices::Data::SetClientExtensionAction ^&gt; ^ actions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Collections.Generic.List&lt;Microsoft.Exchange.WebServices.Data.SetClientExtensionAction&gt;" />
      </Parameters>
      <Docs>
        <param name="actions">A collection of actions applied to client extensions.</param>
        <summary>             Sets the client extension data. This method is used in server-to-server calls to install, uninstall, or configure organization extensions to support the administrator's management of organization extensions via Windows PowerShell or the Exchange Unified Management Console (UMC).             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetClientExtension(System.Collections.Generic.List{Microsoft.Exchange.WebServices.Data.SetClientExtensionAction})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEncryptionConfiguration">
      <MemberSignature Language="C#" Value="public void SetEncryptionConfiguration (string imageBase64, string emailText, string portalText, string disclaimerText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEncryptionConfiguration(string imageBase64, string emailText, string portalText, string disclaimerText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetEncryptionConfiguration(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEncryptionConfiguration (imageBase64 As String, emailText As String, portalText As String, disclaimerText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEncryptionConfiguration(System::String ^ imageBase64, System::String ^ emailText, System::String ^ portalText, System::String ^ disclaimerText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageBase64" Type="System.String" />
        <Parameter Name="emailText" Type="System.String" />
        <Parameter Name="portalText" Type="System.String" />
        <Parameter Name="disclaimerText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageBase64">For internal use only.</param>
        <param name="emailText">For internal use only.</param>
        <param name="portalText">For internal use only.</param>
        <param name="disclaimerText">For internal use only.</param>
        <summary>For internal use only.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlagStatusForItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetFlagStatusForItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, Microsoft.Exchange.WebServices.Data.Flag flagStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetFlagStatusForItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, class Microsoft.Exchange.WebServices.Data.Flag flagStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetFlagStatusForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.Flag)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetFlagStatusForItemsInConversations (idLastSyncTimePairs As IEnumerable(Of KeyValuePair(Of ConversationId, Nullable(Of DateTime))), contextFolderId As FolderId, flagStatus As Flag) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ SetFlagStatusForItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, Microsoft::Exchange::WebServices::Data::Flag ^ flagStatus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="flagStatus" Type="Microsoft.Exchange.WebServices.Data.Flag" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">A collection of conversation IDs and an associated time stamp used to determine which conversations need to be updated.</param>
        <param name="contextFolderId">The ID of the folder that contains the conversation.</param>
        <param name="flagStatus">The <see cref="T:Microsoft.Exchange.WebServices.Data.ConversationFlagStatus" /> enumeration value to apply to conversation items.</param>
        <summary>             Sets the flag status of items in conversations.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetFlagStatusForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.Flag)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The updated flag status. </returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHoldOnMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes (Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes(class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetHoldOnMailboxes (parameters As SetHoldOnMailboxesParameters) As SetHoldOnMailboxesResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::SetHoldOnMailboxesResponse ^ SetHoldOnMailboxes(Microsoft::Exchange::WebServices::Data::SetHoldOnMailboxesParameters ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">A set of parameters for the hold.</param>
        <summary>Sets a query-based hold on items in one or more mailboxes for the purpose of eDiscovery.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesParameters)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The result of a query-based hold.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHoldOnMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes (string holdId, Microsoft.Exchange.WebServices.Data.HoldAction actionType, string query, string inPlaceHoldIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes(string holdId, valuetype Microsoft.Exchange.WebServices.Data.HoldAction actionType, string query, string inPlaceHoldIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(System.String,Microsoft.Exchange.WebServices.Data.HoldAction,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetHoldOnMailboxes (holdId As String, actionType As HoldAction, query As String, inPlaceHoldIdentity As String) As SetHoldOnMailboxesResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::SetHoldOnMailboxesResponse ^ SetHoldOnMailboxes(System::String ^ holdId, Microsoft::Exchange::WebServices::Data::HoldAction actionType, System::String ^ query, System::String ^ inPlaceHoldIdentity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holdId" Type="System.String" />
        <Parameter Name="actionType" Type="Microsoft.Exchange.WebServices.Data.HoldAction" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="inPlaceHoldIdentity" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="holdId">The hold ID for an eDiscovery hold action.</param>
        <param name="actionType">The type of hold action.</param>
        <param name="query">The query used to specify an eDiscovery hold.</param>
        <param name="inPlaceHoldIdentity">An identifier that references an in-place hold (preserves all mailbox content).</param>
        <summary>            Sets a query-based hold on items in a mailbox for the purpose of eDiscovery.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(System.String,Microsoft.Exchange.WebServices.Data.HoldAction,System.String,System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The result of a query-based hold.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHoldOnMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes (string holdId, Microsoft.Exchange.WebServices.Data.HoldAction actionType, string query, string[] mailboxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes(string holdId, valuetype Microsoft.Exchange.WebServices.Data.HoldAction actionType, string query, string[] mailboxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(System.String,Microsoft.Exchange.WebServices.Data.HoldAction,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SetHoldOnMailboxes (holdId As String, actionType As HoldAction, query As String, mailboxes As String()) As SetHoldOnMailboxesResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::SetHoldOnMailboxesResponse ^ SetHoldOnMailboxes(System::String ^ holdId, Microsoft::Exchange::WebServices::Data::HoldAction actionType, System::String ^ query, cli::array &lt;System::String ^&gt; ^ mailboxes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holdId" Type="System.String" />
        <Parameter Name="actionType" Type="Microsoft.Exchange.WebServices.Data.HoldAction" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="mailboxes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="holdId">The hold ID for an eDiscovery hold action.</param>
        <param name="actionType">The type of hold action.</param>
        <param name="query">The query used to specify an eDiscovery hold.</param>
        <param name="mailboxes">The collection of mailboxes.</param>
        <summary>             Sets a query-based hold on items on a collection of mailboxes for the purpose of eDiscovery.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(System.String,Microsoft.Exchange.WebServices.Data.HoldAction,System.String,System.String[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The results of a query-based hold.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHoldOnMailboxes">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes (string holdId, Microsoft.Exchange.WebServices.Data.HoldAction actionType, string query, string inPlaceHoldIdentity, string itemHoldPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse SetHoldOnMailboxes(string holdId, valuetype Microsoft.Exchange.WebServices.Data.HoldAction actionType, string query, string inPlaceHoldIdentity, string itemHoldPeriod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(System.String,Microsoft.Exchange.WebServices.Data.HoldAction,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetHoldOnMailboxes (holdId As String, actionType As HoldAction, query As String, inPlaceHoldIdentity As String, itemHoldPeriod As String) As SetHoldOnMailboxesResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::SetHoldOnMailboxesResponse ^ SetHoldOnMailboxes(System::String ^ holdId, Microsoft::Exchange::WebServices::Data::HoldAction actionType, System::String ^ query, System::String ^ inPlaceHoldIdentity, System::String ^ itemHoldPeriod);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holdId" Type="System.String" />
        <Parameter Name="actionType" Type="Microsoft.Exchange.WebServices.Data.HoldAction" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="inPlaceHoldIdentity" Type="System.String" />
        <Parameter Name="itemHoldPeriod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="holdId">The hold ID for an eDiscovery hold action.</param>
        <param name="actionType">The type of hold action.</param>
        <param name="query">The query used to specify an eDiscovery hold.</param>
        <param name="inPlaceHoldIdentity">An identifier that references an in-place hold (preserves all mailbox content).</param>
        <param name="itemHoldPeriod">A string that indicates the duration for the hold. The string can be "Unlimited" for a permanent hold, or a string in the format generated by the <see cref="M:System.TimeSpan.ToString()" /> method.</param>
        <summary>Sets a query-based hold on items in a mailbox for a specific duration for the purpose of eDiscovery.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetHoldOnMailboxes(System.String,Microsoft.Exchange.WebServices.Data.HoldAction,System.String,System.String,System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The result of a query-based hold.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadStateForItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetReadStateForItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, bool isRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetReadStateForItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, bool isRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetReadStateForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetReadStateForItemsInConversations (idLastSyncTimePairs As IEnumerable(Of KeyValuePair(Of ConversationId, Nullable(Of DateTime))), contextFolderId As FolderId, isRead As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ SetReadStateForItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, bool isRead);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="isRead" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">A collection of conversation IDs and an associated time stamp used to determine which conversations need to be updated.</param>
        <param name="contextFolderId">The folder ID of the folder that contains the specified conversation.</param>
        <param name="isRead">
          <b>true</b> if the conversation items are marked as read; otherwise, <b>false</b>.</param>
        <summary>Sets the read state of items in a conversation.The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetReadStateForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.ServiceResponse" /> object.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadStateForItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetReadStateForItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, bool isRead, bool suppressReadReceipts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetReadStateForItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, bool isRead, bool suppressReadReceipts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetReadStateForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetReadStateForItemsInConversations (idLastSyncTimePairs As IEnumerable(Of KeyValuePair(Of ConversationId, Nullable(Of DateTime))), contextFolderId As FolderId, isRead As Boolean, suppressReadReceipts As Boolean) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ SetReadStateForItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, bool isRead, bool suppressReadReceipts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="isRead" Type="System.Boolean" />
        <Parameter Name="suppressReadReceipts" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">A collection of conversation IDs and an associated time stamp used to determine which conversations need to be updated.</param>
        <param name="contextFolderId">The ID of the folder that contains the conversation.</param>
        <param name="isRead">
          <see cref="true" /> if conversation items are marked as read; otherwise, <see cref="false" />.</param>
        <param name="suppressReadReceipts">
          <see cref="true" /> if read receipts are suppressed; otherwise, <see cref="false" />.</param>
        <summary>             Sets the read state of items in a conversation and optionally sets a value that suppresses read receipts.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetReadStateForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,System.Boolean,System.Boolean)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.ServiceResponse" /> object.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRetentionPolicyForItemsInConversations">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetRetentionPolicyForItemsInConversations (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,Nullable&lt;DateTime&gt;&gt;&gt; idLastSyncTimePairs, Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, Microsoft.Exchange.WebServices.Data.RetentionType retentionPolicyType, Nullable&lt;Guid&gt; retentionPolicyTagId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ServiceResponse&gt; SetRetentionPolicyForItemsInConversations(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;class Microsoft.Exchange.WebServices.Data.ConversationId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt;&gt;&gt; idLastSyncTimePairs, class Microsoft.Exchange.WebServices.Data.FolderId contextFolderId, valuetype Microsoft.Exchange.WebServices.Data.RetentionType retentionPolicyType, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; retentionPolicyTagId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetRetentionPolicyForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.RetentionType,System.Nullable{System.Guid})" />
      <MemberSignature Language="VB.NET" Value="Public Function SetRetentionPolicyForItemsInConversations (idLastSyncTimePairs As IEnumerable(Of KeyValuePair(Of ConversationId, Nullable(Of DateTime))), contextFolderId As FolderId, retentionPolicyType As RetentionType, retentionPolicyTagId As Nullable(Of Guid)) As ServiceResponseCollection(Of ServiceResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::ServiceResponse ^&gt; ^ SetRetentionPolicyForItemsInConversations(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;Microsoft::Exchange::WebServices::Data::ConversationId ^, Nullable&lt;DateTime&gt;&gt;&gt; ^ idLastSyncTimePairs, Microsoft::Exchange::WebServices::Data::FolderId ^ contextFolderId, Microsoft::Exchange::WebServices::Data::RetentionType retentionPolicyType, Nullable&lt;Guid&gt; retentionPolicyTagId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.ServiceResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idLastSyncTimePairs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable&lt;System.DateTime&gt;&gt;&gt;" />
        <Parameter Name="contextFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="retentionPolicyType" Type="Microsoft.Exchange.WebServices.Data.RetentionType" />
        <Parameter Name="retentionPolicyTagId" Type="System.Nullable&lt;System.Guid&gt;" />
      </Parameters>
      <Docs>
        <param name="idLastSyncTimePairs">A collection of conversation IDs and an associated time stamp used to determine which conversations need to be updated.</param>
        <param name="contextFolderId">The ID of the folder that contains the conversation.</param>
        <param name="retentionPolicyType">The tagged item is either archived or deleted.</param>
        <param name="retentionPolicyTagId">The retention policy tag ID. Setting the reference to a null reference (Nothing in Visual Basic) clears the policy.</param>
        <summary>             Sets the retention policy for items in conversation.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetRetentionPolicyForItemsInConversations(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Exchange.WebServices.Data.ConversationId,System.Nullable{System.DateTime}}},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.RetentionType,System.Nullable{System.Guid})" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>The results of the applied retention policy change.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS) Managed API.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTeamMailbox">
      <MemberSignature Language="C#" Value="public void SetTeamMailbox (Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress, Uri sharePointSiteUrl, Microsoft.Exchange.WebServices.Data.TeamMailboxLifecycleState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTeamMailbox(class Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress, class System.Uri sharePointSiteUrl, valuetype Microsoft.Exchange.WebServices.Data.TeamMailboxLifecycleState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetTeamMailbox(Microsoft.Exchange.WebServices.Data.EmailAddress,System.Uri,Microsoft.Exchange.WebServices.Data.TeamMailboxLifecycleState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetTeamMailbox(Microsoft::Exchange::WebServices::Data::EmailAddress ^ emailAddress, Uri ^ sharePointSiteUrl, Microsoft::Exchange::WebServices::Data::TeamMailboxLifecycleState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailAddress" Type="Microsoft.Exchange.WebServices.Data.EmailAddress" />
        <Parameter Name="sharePointSiteUrl" Type="System.Uri" />
        <Parameter Name="state" Type="Microsoft.Exchange.WebServices.Data.TeamMailboxLifecycleState" />
      </Parameters>
      <Docs>
        <param name="emailAddress">The site mailbox email address.</param>
        <param name="sharePointSiteUrl">The URL of the shared mailbox.</param>
        <param name="state">A value that indicates the life cycle state of the site mailbox.</param>
        <summary>             Sets a shared mailbox.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetTeamMailbox(Microsoft.Exchange.WebServices.Data.EmailAddress,System.Uri,Microsoft.Exchange.WebServices.Data.TeamMailboxLifecycleState)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUserOofSettings">
      <MemberSignature Language="C#" Value="public void SetUserOofSettings (string smtpAddress, Microsoft.Exchange.WebServices.Data.OofSettings oofSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetUserOofSettings(string smtpAddress, class Microsoft.Exchange.WebServices.Data.OofSettings oofSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SetUserOofSettings(System.String,Microsoft.Exchange.WebServices.Data.OofSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetUserOofSettings(System::String ^ smtpAddress, Microsoft::Exchange::WebServices::Data::OofSettings ^ oofSettings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smtpAddress" Type="System.String" />
        <Parameter Name="oofSettings" Type="Microsoft.Exchange.WebServices.Data.OofSettings" />
      </Parameters>
      <Docs>
        <param name="smtpAddress">The SMTP address of the user for whom OOF settings are to be set.</param>
        <param name="oofSettings">The OOF settings.</param>
        <summary>Sets the Out of Office (OOF) settings for a specified mailbox.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPullNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PullSubscription SubscribeToPullNotifications (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, int timeout, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PullSubscription SubscribeToPullNotifications(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, int32 timeout, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPullNotifications(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToPullNotifications (folderIds As IEnumerable(Of FolderId), timeout As Integer, watermark As String, ParamArray eventTypes As EventType()) As PullSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PullSubscription ^ SubscribeToPullNotifications(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, int timeout, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PullSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="folderIds">The IDs of the folder to be subscribed to.</param>
        <param name="timeout">The amount of elapsed time, in minutes, after which the subscription expires. The value of this parameter must be in the range from 1 through 1440.</param>
        <param name="watermark">An optional watermark that represents a previously opened subscription.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Subscribes to pull notifications. </summary>
        <returns>The new subscription to the specified folder.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPullNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PullSubscription SubscribeToPullNotificationsOnAllFolders (int timeout, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PullSubscription SubscribeToPullNotificationsOnAllFolders(int32 timeout, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPullNotificationsOnAllFolders(System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToPullNotificationsOnAllFolders (timeout As Integer, watermark As String, ParamArray eventTypes As EventType()) As PullSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PullSubscription ^ SubscribeToPullNotificationsOnAllFolders(int timeout, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PullSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="timeout">The amount of elapsed time, in minutes, after which the subscription expires. The value of this parameter must be in the range from 1 through 1440.</param>
        <param name="watermark">An optional watermark that represents a previously opened subscription.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Subscribes to pull notifications on all folders in a user's mailbox.</summary>
        <returns>A subscription to the specified events.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPushNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotifications (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, Uri url, int frequency, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotifications(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, class System.Uri url, int32 frequency, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotifications(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToPushNotifications (folderIds As IEnumerable(Of FolderId), url As Uri, frequency As Integer, watermark As String, ParamArray eventTypes As EventType()) As PushSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PushSubscription ^ SubscribeToPushNotifications(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, Uri ^ url, int frequency, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PushSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="folderIds">The IDs of the folders to subscribe to.</param>
        <param name="url">The URL of the web service endpoint to which the server should push events.</param>
        <param name="frequency">The interval, in minutes, at which the server is to contact the web service endpoint. The value of this parameter must be in the range from 1 to 1440.</param>
        <param name="watermark">An optional watermark that represents a previously opened subscription.</param>
        <param name="eventTypes">The types of events to subscribe to.</param>
        <summary>Initiates a request for a client to receive push notifications. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotifications(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2010.</summary>
        <returns>A subscription response object.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPushNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotifications (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, Uri url, int frequency, string watermark, string callerData, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotifications(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, class System.Uri url, int32 frequency, string watermark, string callerData, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotifications(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToPushNotifications (folderIds As IEnumerable(Of FolderId), url As Uri, frequency As Integer, watermark As String, callerData As String, ParamArray eventTypes As EventType()) As PushSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PushSubscription ^ SubscribeToPushNotifications(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, Uri ^ url, int frequency, System::String ^ watermark, System::String ^ callerData, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PushSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="callerData" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="folderIds">The IDs of the folder to subscribe to.</param>
        <param name="url">The URL of the web service endpoint the Exchange server should push events to.</param>
        <param name="frequency">The frequency, in minutes, at which the Exchange server should contact the web service endpoint. This value must be between 1 and 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="callerData">Optional information that the caller requests be returned in the push notification response.</param>
        <param name="eventTypes">The types of event to subscribe to.</param>
        <summary>         Initiates a request to receive push notifications that includes a request for additional information to be returned in the push notification response.            The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotifications(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A collection of notification objects.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPushNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotificationsOnAllFolders (Uri url, int frequency, string watermark, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotificationsOnAllFolders(class System.Uri url, int32 frequency, string watermark, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotificationsOnAllFolders(System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToPushNotificationsOnAllFolders (url As Uri, frequency As Integer, watermark As String, ParamArray eventTypes As EventType()) As PushSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PushSubscription ^ SubscribeToPushNotificationsOnAllFolders(Uri ^ url, int frequency, System::String ^ watermark, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PushSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The URL of the web service endpoint to which the Exchange server is to push events.</param>
        <param name="frequency">The interval, in minutes, at which the Exchange Server 2010 is to contact the web service endpoint. The value of this parameter must be in the range from 1 to 1440.</param>
        <param name="watermark">An optional watermark that represents a previously opened subscription.</param>
        <param name="eventTypes">The types of events to subscribe to.</param>
        <summary>Initiates a request to receive push notifications on all folders in a user's mailbox. The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotificationsOnAllFolders(System.Uri,System.Int32,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2010.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.PushSubscription" /> object.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToPushNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotificationsOnAllFolders (Uri url, int frequency, string watermark, string callerData, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.PushSubscription SubscribeToPushNotificationsOnAllFolders(class System.Uri url, int32 frequency, string watermark, string callerData, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotificationsOnAllFolders(System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToPushNotificationsOnAllFolders (url As Uri, frequency As Integer, watermark As String, callerData As String, ParamArray eventTypes As EventType()) As PushSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::PushSubscription ^ SubscribeToPushNotificationsOnAllFolders(Uri ^ url, int frequency, System::String ^ watermark, System::String ^ callerData, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.PushSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="watermark" Type="System.String" />
        <Parameter Name="callerData" Type="System.String" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The URL of the web service endpoint the Exchange server should push events to.</param>
        <param name="frequency">The frequency, in minutes, at which the Exchange server should contact the Web Service endpoint. The frequency value must be between 1 and 1440.</param>
        <param name="watermark">An optional watermark representing a previously opened subscription.</param>
        <param name="callerData">Optional information that the caller requests be returned in the push notification response.</param>
        <param name="eventTypes">The event types to subscribe to.</param>
        <summary>             Initiates a request to receive push notifications on all folders in a user's mailbox that includes a request for additional information to be returned in the push notification response.           The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToPushNotificationsOnAllFolders(System.Uri,System.Int32,System.String,System.String,Microsoft.Exchange.WebServices.Data.EventType[])" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <returns>A <see cref="T:Microsoft.Exchange.WebServices.Data.PushSubscription" /> object.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToStreamingNotifications">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.StreamingSubscription SubscribeToStreamingNotifications (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.StreamingSubscription SubscribeToStreamingNotifications(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.FolderId&gt; folderIds, valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToStreamingNotifications(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.FolderId},Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToStreamingNotifications (folderIds As IEnumerable(Of FolderId), ParamArray eventTypes As EventType()) As StreamingSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::StreamingSubscription ^ SubscribeToStreamingNotifications(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::FolderId ^&gt; ^ folderIds, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.StreamingSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folderIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.FolderId&gt;" />
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="folderIds">The folder identifiers of the folder to be subscribed to.</param>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Subscribes to streaming notifications. Calling this method results in a call to Exchange Web Services (EWS).</summary>
        <returns> A subscription to the specified events..</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToStreamingNotificationsOnAllFolders">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.StreamingSubscription SubscribeToStreamingNotificationsOnAllFolders (params Microsoft.Exchange.WebServices.Data.EventType[] eventTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.StreamingSubscription SubscribeToStreamingNotificationsOnAllFolders(valuetype Microsoft.Exchange.WebServices.Data.EventType[] eventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SubscribeToStreamingNotificationsOnAllFolders(Microsoft.Exchange.WebServices.Data.EventType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToStreamingNotificationsOnAllFolders (ParamArray eventTypes As EventType()) As StreamingSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::StreamingSubscription ^ SubscribeToStreamingNotificationsOnAllFolders(... cli::array &lt;Microsoft::Exchange::WebServices::Data::EventType&gt; ^ eventTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.StreamingSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventTypes" Type="Microsoft.Exchange.WebServices.Data.EventType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventTypes">The event types to be subscribed to.</param>
        <summary>Subscribes to streaming notifications on all folders in a specified user's mailbox.</summary>
        <returns>A subscription to the specified events..</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncFolderHierarchy">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.FolderChange&gt; SyncFolderHierarchy (Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ChangeCollection`1&lt;class Microsoft.Exchange.WebServices.Data.FolderChange&gt; SyncFolderHierarchy(class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SyncFolderHierarchy(Microsoft.Exchange.WebServices.Data.PropertySet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ChangeCollection&lt;Microsoft::Exchange::WebServices::Data::FolderChange ^&gt; ^ SyncFolderHierarchy(Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::String ^ syncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.FolderChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="syncState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertySet">The set of properties to be retrieved for synchronized items.</param>
        <param name="syncState">The optional synchronization state that represents the point in time at which the synchronization is to start.</param>
        <summary>Synchronizes the entire folder hierarchy of the mailbox that the specified Web service is connected to. </summary>
        <returns>A list of changes that occurred in the specified mailbox.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncFolderHierarchy">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.FolderChange&gt; SyncFolderHierarchy (Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ChangeCollection`1&lt;class Microsoft.Exchange.WebServices.Data.FolderChange&gt; SyncFolderHierarchy(class Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, string syncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SyncFolderHierarchy(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.PropertySet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ChangeCollection&lt;Microsoft::Exchange::WebServices::Data::FolderChange ^&gt; ^ SyncFolderHierarchy(Microsoft::Exchange::WebServices::Data::FolderId ^ syncFolderId, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::String ^ syncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.FolderChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="syncState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="syncFolderId">The ID of the folder that contains the subfolders to be synchronized. A a null reference (Nothing in Visual Basic) value indicates the root folder of the mailbox.</param>
        <param name="propertySet">The set of properties to be retrieved for synchronized subfolders.</param>
        <param name="syncState">The optional sync state that represents the point in time  at which the synchronization is to start.</param>
        <summary>Synchronizes the subfolders of a specified folder. </summary>
        <returns>A list of changes that occurred in the specified folder.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncFolderItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.ItemChange&gt; SyncFolderItems (Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, Microsoft.Exchange.WebServices.Data.PropertySet propertySet, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt; ignoredItemIds, int maxChangesReturned, Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope syncScope, string syncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ChangeCollection`1&lt;class Microsoft.Exchange.WebServices.Data.ItemChange&gt; SyncFolderItems(class Microsoft.Exchange.WebServices.Data.FolderId syncFolderId, class Microsoft.Exchange.WebServices.Data.PropertySet propertySet, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.ItemId&gt; ignoredItemIds, int32 maxChangesReturned, valuetype Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope syncScope, string syncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.SyncFolderItems(Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.PropertySet,System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.ItemId},System.Int32,Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ChangeCollection&lt;Microsoft::Exchange::WebServices::Data::ItemChange ^&gt; ^ SyncFolderItems(Microsoft::Exchange::WebServices::Data::FolderId ^ syncFolderId, Microsoft::Exchange::WebServices::Data::PropertySet ^ propertySet, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::ItemId ^&gt; ^ ignoredItemIds, int maxChangesReturned, Microsoft::Exchange::WebServices::Data::SyncFolderItemsScope syncScope, System::String ^ syncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ChangeCollection&lt;Microsoft.Exchange.WebServices.Data.ItemChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="propertySet" Type="Microsoft.Exchange.WebServices.Data.PropertySet" />
        <Parameter Name="ignoredItemIds" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.ItemId&gt;" />
        <Parameter Name="maxChangesReturned" Type="System.Int32" />
        <Parameter Name="syncScope" Type="Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope" />
        <Parameter Name="syncState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="syncFolderId">The ID of the folder that contains the items to be synchronized.</param>
        <param name="propertySet">The set of properties to be retrieved for synchronized items.</param>
        <param name="ignoredItemIds">The optional list of item IDs that should be ignored.</param>
        <param name="maxChangesReturned">The maximum number of changes that should be returned.</param>
        <param name="syncScope">The synchronization scope that identifies items to be included in the response.</param>
        <param name="syncState">The optional synchronization state that represents the point in time at which the synchronization is to start.</param>
        <summary>Synchronizes the items in a specified folder. </summary>
        <returns>A list of changes that occurred in the specified folder.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeZone">
      <MemberSignature Language="C#" Value="public TimeZoneInfo TimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.TimeZoneInfo TimeZone" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.TimeZone" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeZone As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo ^ TimeZone { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time zone to which Exchange Web Services (EWS) is scoped.</summary>
        <value>The time zone to which the service is scoped.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEnablePrettyPrinting">
      <MemberSignature Language="C#" Value="public bool TraceEnablePrettyPrinting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TraceEnablePrettyPrinting" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.TraceEnablePrettyPrinting" />
      <MemberSignature Language="VB.NET" Value="Public Property TraceEnablePrettyPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TraceEnablePrettyPrinting { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>             Gets or sets a value indicating whether the trace output has stylistic formatting conventions applied.           The <see cref="P:Microsoft.Exchange.WebServices.Data.ExchangeService.TraceEnablePrettyPrinting" /> property is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <value>
          <b>true</b> if the trace output is pretty printed; otherwise, <b>false</b>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnifiedMessaging">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.UnifiedMessaging UnifiedMessaging { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Exchange.WebServices.Data.UnifiedMessaging UnifiedMessaging" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.UnifiedMessaging" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnifiedMessaging As UnifiedMessaging" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Exchange::WebServices::Data::UnifiedMessaging ^ UnifiedMessaging { Microsoft::Exchange::WebServices::Data::UnifiedMessaging ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.UnifiedMessaging</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides access to the Unified Messaging (UM) functionalities.</summary>
        <value>An object that represents the UM service.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UninstallApp">
      <MemberSignature Language="C#" Value="public void UninstallApp (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UninstallApp(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UninstallApp(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UninstallApp (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UninstallApp(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The application ID.</param>
        <summary>             Uninstalls a mail app.              The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UninstallApp(System.String)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <remarks>
          <para>Exception will be thrown for errors. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnpinTeamMailbox">
      <MemberSignature Language="C#" Value="public void UnpinTeamMailbox (Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnpinTeamMailbox(class Microsoft.Exchange.WebServices.Data.EmailAddress emailAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UnpinTeamMailbox(Microsoft.Exchange.WebServices.Data.EmailAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnpinTeamMailbox(Microsoft::Exchange::WebServices::Data::EmailAddress ^ emailAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailAddress" Type="Microsoft.Exchange.WebServices.Data.EmailAddress" />
      </Parameters>
      <Docs>
        <param name="emailAddress">The email address for the site mailbox.</param>
        <summary>             Unpins a site mailbox. When a mailbox is unpinned, it is no longer guaranteed to be available offline.             The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UnpinTeamMailbox(Microsoft.Exchange.WebServices.Data.EmailAddress)" /> method is applicable for clients that target Exchange Online and versions of Exchange starting with Exchange Server 2013.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDelegates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; UpdateDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, params Microsoft.Exchange.WebServices.Data.DelegateUser[] delegateUsers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; UpdateDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, class Microsoft.Exchange.WebServices.Data.DelegateUser[] delegateUsers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Nullable{Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope},Microsoft.Exchange.WebServices.Data.DelegateUser[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::DelegateUserResponse ^&gt; ^ UpdateDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, Nullable&lt;Microsoft::Exchange::WebServices::Data::MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, ... cli::array &lt;Microsoft::Exchange::WebServices::Data::DelegateUser ^&gt; ^ delegateUsers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="meetingRequestsDeliveryScope" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt;" />
        <Parameter Name="delegateUsers" Type="Microsoft.Exchange.WebServices.Data.DelegateUser[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox on which delegates are to be updated.</param>
        <param name="meetingRequestsDeliveryScope">One of the enumeration values that sepcifies how meeting requests should be sent to delegates.</param>
        <param name="delegateUsers">The delegates to be updated on the specified mailbox.</param>
        <summary>Updates delegates on a specified mailbox.</summary>
        <returns>A collection of objects that provides the results of the operation.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDelegates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; UpdateDelegates (Microsoft.Exchange.WebServices.Data.Mailbox mailbox, Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.DelegateUser&gt; delegateUsers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt; UpdateDelegates(class Microsoft.Exchange.WebServices.Data.Mailbox mailbox, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.DelegateUser&gt; delegateUsers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateDelegates(Microsoft.Exchange.WebServices.Data.Mailbox,System.Nullable{Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope},System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.DelegateUser})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::Collection&lt;Microsoft::Exchange::WebServices::Data::DelegateUserResponse ^&gt; ^ UpdateDelegates(Microsoft::Exchange::WebServices::Data::Mailbox ^ mailbox, Nullable&lt;Microsoft::Exchange::WebServices::Data::MeetingRequestsDeliveryScope&gt; meetingRequestsDeliveryScope, System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::DelegateUser ^&gt; ^ delegateUsers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Exchange.WebServices.Data.DelegateUserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="Microsoft.Exchange.WebServices.Data.Mailbox" />
        <Parameter Name="meetingRequestsDeliveryScope" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope&gt;" />
        <Parameter Name="delegateUsers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.DelegateUser&gt;" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox on which delegates are to be updated.</param>
        <param name="meetingRequestsDeliveryScope">One of the enumeration values that specifies how meeting requests should be sent to delegates.</param>
        <param name="delegateUsers">The delegates to be updated on the specified mailbox.</param>
        <summary>Updates delegates on a specified mailbox. </summary>
        <returns>A collection of objects that provides the results of the operation.</returns>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Services (EWS).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateInboxRules">
      <MemberSignature Language="C#" Value="public void UpdateInboxRules (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.RuleOperation&gt; operations, bool removeOutlookRuleBlob);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateInboxRules(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.RuleOperation&gt; operations, bool removeOutlookRuleBlob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateInboxRules(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.RuleOperation},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateInboxRules (operations As IEnumerable(Of RuleOperation), removeOutlookRuleBlob As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateInboxRules(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::RuleOperation ^&gt; ^ operations, bool removeOutlookRuleBlob);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.RuleOperation&gt;" />
        <Parameter Name="removeOutlookRuleBlob" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="operations">The operations that are to be applied to the specified user's Inbox rules.</param>
        <param name="removeOutlookRuleBlob">
          <b>true</b> to remove the Outlook rule blob ; otherwise, <b>false</b>.</param>
        <summary>Updates a specified user's Inbox rules by applying the specified operations.</summary>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para>You can use the <see cref="P:Microsoft.Exchange.WebServices.Data.RuleCollection.OutlookRuleBlobExists" /> property to determine whether to prompt the user before calling this method. </para>
          <para>When you call the UpdateInboxRules method, EWS deletes client-side send rules. Client-side send rules are stored on the client in the rule Folder Associated Information (FAI) Message and nowhere else.  EWS deletes this rule FAI message by default, based on the expectation that  Outlook will recreate it. However, Outlook can't recreate rules that don't also exist as an extended rule, and client-side send rules don't exist as extended rules.  As a result, these rules are lost. We suggest you consider this when designing your solution.
</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateInboxRules">
      <MemberSignature Language="C#" Value="public void UpdateInboxRules (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.RuleOperation&gt; operations, bool removeOutlookRuleBlob, string mailboxSmtpAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateInboxRules(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.RuleOperation&gt; operations, bool removeOutlookRuleBlob, string mailboxSmtpAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateInboxRules(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.RuleOperation},System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateInboxRules (operations As IEnumerable(Of RuleOperation), removeOutlookRuleBlob As Boolean, mailboxSmtpAddress As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateInboxRules(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::RuleOperation ^&gt; ^ operations, bool removeOutlookRuleBlob, System::String ^ mailboxSmtpAddress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.RuleOperation&gt;" />
        <Parameter Name="removeOutlookRuleBlob" Type="System.Boolean" />
        <Parameter Name="mailboxSmtpAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">The operations that are to be applied to the specified user's Inbox rules.</param>
        <param name="removeOutlookRuleBlob">
          <b>true</b> to remove the existing the Outlook rule blob; otherwise, <b>false</b>.</param>
        <param name="mailboxSmtpAddress">The SMTP address of the user whose Inbox rules are to be updated.</param>
        <summary> Updates a specified user's Inbox rules by applying the specified operations.</summary>
        <remarks>
          <para>Calling this method results in a call to Exchange Web Service (EWS).</para>
          <para>You can use the <see cref="P:Microsoft.Exchange.WebServices.Data.RuleCollection.OutlookRuleBlobExists" /> property to determine whether to prompt the user before calling this method. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.UpdateItemResponse&gt; UpdateItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt; items, Microsoft.Exchange.WebServices.Data.FolderId savedItemsDestinationFolderId, Microsoft.Exchange.WebServices.Data.ConflictResolutionMode conflictResolution, Nullable&lt;Microsoft.Exchange.WebServices.Data.MessageDisposition&gt; messageDisposition, Nullable&lt;Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode&gt; sendInvitationsOrCancellationsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.UpdateItemResponse&gt; UpdateItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; items, class Microsoft.Exchange.WebServices.Data.FolderId savedItemsDestinationFolderId, valuetype Microsoft.Exchange.WebServices.Data.ConflictResolutionMode conflictResolution, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MessageDisposition&gt; messageDisposition, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode&gt; sendInvitationsOrCancellationsMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ConflictResolutionMode,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode})" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateItems (items As IEnumerable(Of Item), savedItemsDestinationFolderId As FolderId, conflictResolution As ConflictResolutionMode, messageDisposition As Nullable(Of MessageDisposition), sendInvitationsOrCancellationsMode As Nullable(Of SendInvitationsOrCancellationsMode)) As ServiceResponseCollection(Of UpdateItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::UpdateItemResponse ^&gt; ^ UpdateItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ items, Microsoft::Exchange::WebServices::Data::FolderId ^ savedItemsDestinationFolderId, Microsoft::Exchange::WebServices::Data::ConflictResolutionMode conflictResolution, Nullable&lt;Microsoft::Exchange::WebServices::Data::MessageDisposition&gt; messageDisposition, Nullable&lt;Microsoft::Exchange::WebServices::Data::SendInvitationsOrCancellationsMode&gt; sendInvitationsOrCancellationsMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.UpdateItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt;" />
        <Parameter Name="savedItemsDestinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="conflictResolution" Type="Microsoft.Exchange.WebServices.Data.ConflictResolutionMode" />
        <Parameter Name="messageDisposition" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MessageDisposition&gt;" />
        <Parameter Name="sendInvitationsOrCancellationsMode" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode&gt;" />
      </Parameters>
      <Docs>
        <param name="items">The items to be updated.</param>
        <param name="savedItemsDestinationFolderId">The folder in which sent messages, meeting invitations, or cancellations are to be saved. If this parameter is a null reference (Nothing in Visual Basic), the messages, meeting invitations, or cancellations are saved in the Sent Items folder.</param>
        <param name="conflictResolution">One of the enumeration values that specifies how conflict resolutions should be handled.</param>
        <param name="messageDisposition">One of the enumeration values that specifies the disposition mode for <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" /> objects. This parameter is required if items contain at least one <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" /> instance.</param>
        <param name="sendInvitationsOrCancellationsMode">One of the enumeration values that specifies whether and how invitations and/or cancellations should be sent for <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" /> objects. This parameter is required for items that contain at least one <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" /> instance.</param>
        <summary>Updates multiple items in a single Exchange Web Services (EWS) call.</summary>
        <returns>A collection of update results for each of the specified items.</returns>
        <remarks>
          <para>The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ConflictResolutionMode,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode})" /> method does not support items that have unsaved attachments. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateItems">
      <MemberSignature Language="C#" Value="public Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.UpdateItemResponse&gt; UpdateItems (System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt; items, Microsoft.Exchange.WebServices.Data.FolderId savedItemsDestinationFolderId, Microsoft.Exchange.WebServices.Data.ConflictResolutionMode conflictResolution, Nullable&lt;Microsoft.Exchange.WebServices.Data.MessageDisposition&gt; messageDisposition, Nullable&lt;Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode&gt; sendInvitationsOrCancellationsMode, bool suppressReadReceipts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1&lt;class Microsoft.Exchange.WebServices.Data.UpdateItemResponse&gt; UpdateItems(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Exchange.WebServices.Data.Item&gt; items, class Microsoft.Exchange.WebServices.Data.FolderId savedItemsDestinationFolderId, valuetype Microsoft.Exchange.WebServices.Data.ConflictResolutionMode conflictResolution, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.MessageDisposition&gt; messageDisposition, valuetype System.Nullable`1&lt;valuetype Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode&gt; sendInvitationsOrCancellationsMode, bool suppressReadReceipts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ConflictResolutionMode,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateItems (items As IEnumerable(Of Item), savedItemsDestinationFolderId As FolderId, conflictResolution As ConflictResolutionMode, messageDisposition As Nullable(Of MessageDisposition), sendInvitationsOrCancellationsMode As Nullable(Of SendInvitationsOrCancellationsMode), suppressReadReceipts As Boolean) As ServiceResponseCollection(Of UpdateItemResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Exchange::WebServices::Data::ServiceResponseCollection&lt;Microsoft::Exchange::WebServices::Data::UpdateItemResponse ^&gt; ^ UpdateItems(System::Collections::Generic::IEnumerable&lt;Microsoft::Exchange::WebServices::Data::Item ^&gt; ^ items, Microsoft::Exchange::WebServices::Data::FolderId ^ savedItemsDestinationFolderId, Microsoft::Exchange::WebServices::Data::ConflictResolutionMode conflictResolution, Nullable&lt;Microsoft::Exchange::WebServices::Data::MessageDisposition&gt; messageDisposition, Nullable&lt;Microsoft::Exchange::WebServices::Data::SendInvitationsOrCancellationsMode&gt; sendInvitationsOrCancellationsMode, bool suppressReadReceipts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Exchange.WebServices.Data.ServiceResponseCollection&lt;Microsoft.Exchange.WebServices.Data.UpdateItemResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Exchange.WebServices.Data.Item&gt;" />
        <Parameter Name="savedItemsDestinationFolderId" Type="Microsoft.Exchange.WebServices.Data.FolderId" />
        <Parameter Name="conflictResolution" Type="Microsoft.Exchange.WebServices.Data.ConflictResolutionMode" />
        <Parameter Name="messageDisposition" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.MessageDisposition&gt;" />
        <Parameter Name="sendInvitationsOrCancellationsMode" Type="System.Nullable&lt;Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode&gt;" />
        <Parameter Name="suppressReadReceipts" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="items">The items to be updated.</param>
        <param name="savedItemsDestinationFolderId">The folder in which sent messages, meeting invitations, or cancellations are to be saved. If this parameter is a null reference (Nothing in Visual Basic), the messages, meeting invitations, or cancellations are saved in the Sent Items folder.</param>
        <param name="conflictResolution">One of the enumeration values that specifies how conflict resolutions should be handled.</param>
        <param name="messageDisposition">One of the enumeration values that specifies the disposition mode for <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" /> objects. This parameter is required if items contain at least one <see cref="T:Microsoft.Exchange.WebServices.Data.EmailMessage" /> instance.</param>
        <param name="sendInvitationsOrCancellationsMode">One of the enumeration values that specifies whether and how invitations and/or cancellations should be sent for <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" /> objects. This parameter is required for items that contain at least one <see cref="T:Microsoft.Exchange.WebServices.Data.Appointment" /> instance.</param>
        <param name="suppressReadReceipts">
          <b>true</b> if read receipts should not be sent for any items being updated that have requested a read receipt; otherwise, <b>false</b>.</param>
        <summary>
            Updates multiple items in a single EWS call. UpdateItems does not support items that have unsaved attachments.
            </summary>
        <returns>A collection of update results for each of the specified items.</returns>
        <remarks>
          <para>The <see cref="M:Microsoft.Exchange.WebServices.Data.ExchangeService.UpdateItems(System.Collections.Generic.IEnumerable{Microsoft.Exchange.WebServices.Data.Item},Microsoft.Exchange.WebServices.Data.FolderId,Microsoft.Exchange.WebServices.Data.ConflictResolutionMode,System.Nullable{Microsoft.Exchange.WebServices.Data.MessageDisposition},System.Nullable{Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode},System.Boolean)" /> method does not support items that have unsaved attachments. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Exchange.WebServices.Data.ExchangeService.Url" />
      <MemberSignature Language="VB.NET" Value="Public Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Exchange.WebServices</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of Exchange Web Services (EWS).</summary>
        <value>The URL of EWS.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>